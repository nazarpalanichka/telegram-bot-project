# -*- coding: utf-8 -*-
# handlers/finance.py

import logging
import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler
)
from telegram.error import TelegramError, BadRequest

import config
from .start import cancel_command
from .keyboards import get_employee_keyboard

logger = logging.getLogger(__name__)
gs_manager = None

# –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è –∞—Ä–∫—É—à–∞ "–û–ø–ª–∞—Ç–∏"
PAYMENT_SHEET_HEADERS = ["–ù–∞–∑–≤–∞ –∞–≤—Ç–æ", "–í–Ü–ù-–∫–æ–¥", "–ö–ª—ñ—î–Ω—Ç", "–î–∂–µ—Ä–µ–ª–æ", "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å", "–°–ø–ª–∞—á–µ–Ω–æ", "–ó–∞–ª–∏—à–æ–∫", "–°—Ç–∞—Ç—É—Å", "–¢—Ä–µ–∫–µ—Ä", "ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞", "–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç", "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ"]

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å ---

def build_finance_notification_text(deal_record: dict, manager_name: str, action_text: str = "–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —É–≥–æ–¥—É") -> str:
    """–§–æ—Ä–º—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É."""
    total_paid = float(deal_record.get('–°–ø–ª–∞—á–µ–Ω–æ', 0))
    total_price = float(deal_record.get('–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å', 0))
    remainder = total_price - total_paid

    return (f"üíº *{action_text}*\n\n"
            f"*{deal_record.get('–ù–∞–∑–≤–∞ –∞–≤—Ç–æ', '–ê–≤—Ç–æ')}*\n"
            f"*VIN:* `{deal_record['–í–Ü–ù-–∫–æ–¥']}`\n"
            f"*–ö–ª—ñ—î–Ω—Ç:* {deal_record['–ö–ª—ñ—î–Ω—Ç']}\n"
            f"*–î–∂–µ—Ä–µ–ª–æ:* {deal_record['–î–∂–µ—Ä–µ–ª–æ']}\n"
            f"*–°—É–º–∞:* ${total_price:,.2f}\n"
            f"*–°–ø–ª–∞—á–µ–Ω–æ:* ${total_paid:,.2f}\n"
            f"*–ó–∞–ª–∏—à–æ–∫:* `${remainder:,.2f}`\n"
            f"*–ú–µ–Ω–µ–¥–∂–µ—Ä:* {manager_name}")

async def send_or_edit_finance_notification(context: ContextTypes.DEFAULT_TYPE, deal_record: dict, manager_name: str, action_text: str) -> int | None:
    """–ù–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ –∞–±–æ —Ä–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ."""
    if config.FINANCE_CHANNEL_ID == 0:
        return None

    notification_text = build_finance_notification_text(deal_record, manager_name, action_text)
    message_id = deal_record.get("ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ")

    try:
        if message_id:
            await context.bot.edit_message_text(
                chat_id=config.FINANCE_CHANNEL_ID,
                message_id=int(message_id),
                text=notification_text,
                parse_mode='Markdown'
            )
            return int(message_id)
        else:
            message = await context.bot.send_message(
                chat_id=config.FINANCE_CHANNEL_ID,
                text=notification_text,
                parse_mode='Markdown'
            )
            return message.message_id
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.warning("Finance notification not modified.")
            return int(message_id) if message_id else None
        else:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è {message_id}: {e}. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ.")
            try:
                message = await context.bot.send_message(
                    chat_id=config.FINANCE_CHANNEL_ID,
                    text=notification_text,
                    parse_mode='Markdown'
                )
                return message.message_id
            except TelegramError as e_new:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e_new}")
                return None
    except TelegramError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏/–≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
        return None

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ ---
async def finance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞ —É–≥–æ–¥–∞", callback_data="finance_action_new")],
        [InlineKeyboardButton("üíµ –î–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É", callback_data="finance_action_add")],
        [InlineKeyboardButton("üöö –î–æ–¥–∞—Ç–∏/–ó–º—ñ–Ω–∏—Ç–∏ —Ç—Ä–µ–∫–µ—Ä", callback_data="finance_action_tracker")],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —É–≥–æ–¥—É", callback_data="finance_action_view")],
        [InlineKeyboardButton("üìã –ú–æ—ó —É–≥–æ–¥–∏", callback_data="finance_my_deals")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±—ñ–Ω–µ—Ç", callback_data="back_to_main_cabinet")]
    ]
    await query.message.edit_text("üí∏ *–§—ñ–Ω–∞–Ω—Å–∏ —Ç–∞ –û–ø–ª–∞—Ç–∏*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return config.FINANCE_MENU

# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def ask_for_vin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_')[-1]
    context.user_data['finance_action'] = action
    
    action_text_map = {
        'new': '—Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É',
        'add': '–¥–æ–¥–∞—Ç–∏ –æ–ø–ª–∞—Ç—É –¥–æ',
        'view': '–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏',
        'tracker': '–¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫–µ—Ä –¥–æ'
    }
    
    await query.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—ñ 4+ —Ü–∏—Ñ—Ä–∏ –í–Ü–ù-–∫–æ–¥—É, —â–æ–± {action_text_map.get(action, '')} —É–≥–æ–¥—É:")
    return config.FINANCE_GET_VIN

async def find_deal_by_vin_query(vin_query: str) -> dict | None:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —É–≥–æ–¥—É –∑–∞ –ø–æ–≤–Ω–∏–º –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–∏–º VIN-–∫–æ–¥–æ–º."""
    vin_query = vin_query.strip().upper()
    if not vin_query:
        return None
        
    payments_sheet = config.SHEET_NAMES['payments']
    all_deals = await gs_manager.get_all_records(payments_sheet, expected_headers=PAYMENT_SHEET_HEADERS)
    
    # –ü–æ—à—É–∫ –ø–æ –ø–æ–≤–Ω–æ–º—É VIN
    for i, deal in enumerate(all_deals):
        deal_vin = str(deal.get("–í–Ü–ù-–∫–æ–¥", "")).strip()
        if deal_vin == vin_query:
            return {"record": deal, "row_index": i + 2}
    
    # –ü–æ—à—É–∫ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ VIN
    if len(vin_query) >= 4:
        for i, deal in enumerate(all_deals):
            deal_vin = str(deal.get("–í–Ü–ù-–∫–æ–¥", "")).strip()
            if deal_vin and deal_vin.endswith(vin_query):
                return {"record": deal, "row_index": i + 2}
                
    return None

async def get_vin_and_proceed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    vin_query = update.message.text.strip().upper()
    action = context.user_data.get('finance_action')
    
    context.user_data['messages_to_delete'] = [update.message.message_id]
    
    existing_deal = await find_deal_by_vin_query(vin_query)
    context.user_data['existing_deal'] = existing_deal
    
    if action == 'new':
        if existing_deal:
            await update.message.reply_text(f"‚ùå –£–≥–æ–¥–∞ –¥–ª—è VIN, —â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ `{vin_query}`, –≤–∂–µ —ñ—Å–Ω—É—î.", parse_mode='Markdown')
            return ConversationHandler.END
        
        if len(vin_query) != 17:
            await update.message.reply_text("‚ùå –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —É–≥–æ–¥–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ–≤–Ω–∏–π –í–Ü–ù-–∫–æ–¥ (17 —Å–∏–º–≤–æ–ª—ñ–≤).")
            return config.FINANCE_GET_VIN
        context.user_data['vin'] = vin_query
        return await new_deal_ask_model(update, context)
        
    elif action in ['add', 'view', 'tracker']:
        if not existing_deal:
            await update.message.reply_text(f"‚ùå –£–≥–æ–¥—É –¥–ª—è VIN `{vin_query}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", parse_mode='Markdown')
            return ConversationHandler.END
        if action == 'add':
            return await add_payment_ask_amount(update, context)
        elif action == 'view':
            return await view_deal_details(update, context)
        else: # tracker
            return await add_tracker_ask_value(update, context)
    
    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –º–µ–Ω—é.")
    return ConversationHandler.END

# --- –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —É–≥–æ–¥–∏ ---
async def new_deal_ask_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –∞–≤—Ç–æ (–Ω–∞–ø—Ä. BYD Yuan Plus Subtop 2024):")
    return config.FINANCE_NEW_DEAL_GET_MODEL

async def new_deal_get_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['model_name'] = update.message.text.strip()
    keyboard = [[InlineKeyboardButton("–°–®–ê üá∫üá∏", callback_data="source_–°–®–ê")], [InlineKeyboardButton("–ö–∏—Ç–∞–π üá®üá≥", callback_data="source_–ö–∏—Ç–∞–π")]]
    await update.message.reply_text("–î—è–∫—É—é. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, –∑–≤—ñ–¥–∫–∏ –∞–≤—Ç–æ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return config.FINANCE_NEW_DEAL_SOURCE

async def new_deal_get_source(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['source'] = query.data.split('_')[1]
    await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞–≤—Ç–æ '–ø—ñ–¥ –∫–ª—é—á' (USD, —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):")
    return config.FINANCE_NEW_DEAL_PRICE

async def new_deal_get_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = float(update.message.text.strip())
        context.user_data['total_price'] = price
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")
        return config.FINANCE_NEW_DEAL_CLIENT
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25000")
        return config.FINANCE_NEW_DEAL_PRICE

async def new_deal_get_client(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['client'] = update.message.text.strip()
    ud = context.user_data
    text = (f"‚úÖ *–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –Ω–æ–≤–æ—ó —É–≥–æ–¥–∏*\n\n"
            f"–ê–≤—Ç–æ: *{ud['model_name']}*\n"
            f"VIN: `{ud['vin']}`\n"
            f"–î–∂–µ—Ä–µ–ª–æ: *{ud['source']}*\n"
            f"–ö–ª—ñ—î–Ω—Ç: *{ud['client']}*\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: *${ud['total_price']:,.2f}*\n\n"
            f"–í—Å–µ –≤—ñ—Ä–Ω–æ? –°—Ç–≤–æ—Ä—é—î–º–æ —É–≥–æ–¥—É?")
    
    keyboard = [[InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å—Ç–≤–æ—Ä–∏—Ç–∏", callback_data="confirm_new_deal")]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    return config.FINANCE_NEW_DEAL_CONFIRM

async def new_deal_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    await query.message.edit_text("–ó–±–µ—Ä—ñ–≥–∞—é –Ω–æ–≤—É —É–≥–æ–¥—É...")

    ud = context.user_data
    new_deal_data = {
        "–ù–∞–∑–≤–∞ –∞–≤—Ç–æ": ud.get('model_name', '–ù/–î'),
        "–í–Ü–ù-–∫–æ–¥": ud['vin'],
        "–ö–ª—ñ—î–Ω—Ç": ud['client'],
        "–î–∂–µ—Ä–µ–ª–æ": ud['source'],
        "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å": ud['total_price'],
        "–°–ø–ª–∞—á–µ–Ω–æ": 0,
        "–ó–∞–ª–∏—à–æ–∫": ud['total_price'],
        "–°—Ç–∞—Ç—É—Å": "–í –ø—Ä–æ—Ü–µ—Å—ñ",
        "–¢—Ä–µ–∫–µ—Ä": "",
        "ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞": user.id,
        "–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç": "",
        "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ": ""
    }
    
    new_msg_id = await send_or_edit_finance_notification(context, new_deal_data, user.full_name, "–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É —É–≥–æ–¥—É")
    if new_msg_id:
        new_deal_data["ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ"] = new_msg_id

    success = await gs_manager.add_row(config.SHEET_NAMES['payments'], new_deal_data, PAYMENT_SHEET_HEADERS)
    
    if success:
        await query.message.edit_text("‚úÖ –£–≥–æ–¥—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        await context.bot.send_message(chat_id=user.id, text="–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_employee_keyboard(user.id))
    else:
        await query.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await context.bot.send_message(chat_id=user.id, text="–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_employee_keyboard(user.id))
        
    return ConversationHandler.END

# --- –õ–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ ---
async def add_payment_ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    deal = context.user_data['existing_deal']['record']
    text = (f"üíµ *–î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –¥–ª—è* `{deal.get('–ù–∞–∑–≤–∞ –∞–≤—Ç–æ', deal['–í–Ü–ù-–∫–æ–¥'])}`\n"
            f"–ö–ª—ñ—î–Ω—Ç: {deal['–ö–ª—ñ—î–Ω—Ç']}\n"
            f"–ó–∞–ª–∏—à–æ–∫: *${float(deal['–ó–∞–ª–∏—à–æ–∫']):,.2f}*\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É (USD):")
    msg = await update.message.reply_text(text, parse_mode='Markdown')
    context.user_data['messages_to_delete'].append(msg.message_id)
    return config.FINANCE_ADD_PAYMENT_AMOUNT

async def add_payment_get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = float(update.message.text.strip())
        context.user_data['payment_amount'] = amount
        context.user_data['messages_to_delete'].append(update.message.message_id)
        msg = await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø–ª–∞—Ç–µ–∂—É (–Ω–∞–ø—Ä. '10% –∞–≤–∞–Ω—Å', '–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'):")
        context.user_data['messages_to_delete'].append(msg.message_id)
        return config.FINANCE_ADD_PAYMENT_COMMENT
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1500.50")
        return config.FINANCE_ADD_PAYMENT_AMOUNT

async def add_payment_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    comment = update.message.text.strip()
    amount = context.user_data['payment_amount']
    deal_info = context.user_data['existing_deal']
    deal_record = deal_info['record']
    user = update.effective_user
    
    context.user_data['messages_to_delete'].append(update.message.message_id)

    for msg_id in context.user_data.get('messages_to_delete', []):
        try:
            await context.bot.delete_message(chat_id=user.id, message_id=msg_id)
        except TelegramError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id}: {e}")

    total_paid = float(deal_record.get('–°–ø–ª–∞—á–µ–Ω–æ', 0)) + amount
    total_price = float(deal_record.get('–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å', 0))
    remainder = total_price - total_paid

    payment_entry = f"({datetime.datetime.now().strftime('%Y-%m-%d')}: ${amount:,.2f} - {comment})"
    new_history = f"{deal_record.get('–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç', '')}; {payment_entry}".strip('; ')

    deal_record['–°–ø–ª–∞—á–µ–Ω–æ'] = total_paid
    deal_record['–ó–∞–ª–∏—à–æ–∫'] = remainder
    deal_record['–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç'] = new_history
    if remainder <= 0:
        deal_record['–°—Ç–∞—Ç—É—Å'] = '–û–ø–ª–∞—á–µ–Ω–æ'

    new_msg_id = await send_or_edit_finance_notification(context, deal_record, user.full_name, "–ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –æ–ø–ª–∞—Ç—É")
    if new_msg_id:
        deal_record["ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ"] = new_msg_id

    success = await gs_manager.update_row(config.SHEET_NAMES['payments'], deal_info['row_index'], deal_record, PAYMENT_SHEET_HEADERS)

    if success:
        await context.bot.send_message(chat_id=user.id, text=f"‚úÖ –û–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –ù–æ–≤–∏–π –∑–∞–ª–∏—à–æ–∫: ${remainder:,.2f}", reply_markup=get_employee_keyboard(user.id))
    else:
        await context.bot.send_message(chat_id=user.id, text="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_employee_keyboard(user.id))
        
    return ConversationHandler.END

# --- –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É —É–≥–æ–¥ ---
async def view_deal_details(update: Update, context: ContextTypes.DEFAULT_TYPE, from_list: bool = False) -> int:
    query = update.callback_query
    if from_list:
        vin = query.data.split('_')[-1]
        deal_info = await find_deal_by_vin_query(vin)
        try:
            await query.message.edit_text("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–µ—Ç–∞–ª—ñ...")
        except TelegramError:
            await query.message.delete()
    else:
        deal_info = context.user_data['existing_deal']

    if not deal_info:
        await update.effective_message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —É–≥–æ–¥—É.")
        return ConversationHandler.END

    context.user_data['current_deal_info'] = deal_info
    deal = deal_info['record']
    history_text = "\n".join([f"  ‚Ä¢ {item.strip()}" for item in deal.get('–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç', '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è').split(';') if item])
    
    text = (f"üìä *–°—Ç–∞–Ω —É–≥–æ–¥–∏ –¥–ª—è* `{deal.get('–ù–∞–∑–≤–∞ –∞–≤—Ç–æ', deal['–í–Ü–ù-–∫–æ–¥'])}`\n\n"
            f"üë§ *–ö–ª—ñ—î–Ω—Ç:* {deal['–ö–ª—ñ—î–Ω—Ç']}\n"
            f"üåç *–î–∂–µ—Ä–µ–ª–æ:* {deal['–î–∂–µ—Ä–µ–ª–æ']}\n"
            f"üí≤ *–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* ${float(deal.get('–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å', 0)):,.2f}\n"
            f"‚úÖ *–°–ø–ª–∞—á–µ–Ω–æ:* ${float(deal.get('–°–ø–ª–∞—á–µ–Ω–æ', 0)):,.2f}\n"
            f"‚è≥ *–ó–∞–ª–∏—à–æ–∫:* `${float(deal.get('–ó–∞–ª–∏—à–æ–∫', 0)):,.2f}`\n"
            f"üìà *–°—Ç–∞—Ç—É—Å:* {deal['–°—Ç–∞—Ç—É—Å']}\n"
            f"üöö *–¢—Ä–µ–∫–µ—Ä:* `{deal.get('–¢—Ä–µ–∫–µ—Ä') or '–ù–µ –¥–æ–¥–∞–Ω–æ'}`\n\n"
            f"üìú *–Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–ª–∞—Ç:*\n{history_text}")
    
    keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="finance_edit_deal")]]
    
    target_message = query.message if from_list else update.message
    try:
        await target_message.edit_text(text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
    except (AttributeError, TelegramError):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

    return config.FINANCE_VIEW_DEAL

async def show_my_deals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = str(query.from_user.id)
    await query.answer()
    await query.message.edit_text("üîç –®—É–∫–∞—é –≤–∞—à—ñ —É–≥–æ–¥–∏...")

    all_deals = await gs_manager.get_all_records(config.SHEET_NAMES['payments'], expected_headers=PAYMENT_SHEET_HEADERS)
    
    my_deals = [
        d for d in all_deals 
        if str(d.get("ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞", "")).strip() == user_id 
        and str(d.get("–°—Ç–∞—Ç—É—Å", "")).strip() == "–í –ø—Ä–æ—Ü–µ—Å—ñ"
    ]

    if not my_deals:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_finance_menu")]]))
        return config.FINANCE_MY_DEALS_LIST

    keyboard = []
    for deal in my_deals:
        vin = deal['–í–Ü–ù-–∫–æ–¥']
        model = deal.get('–ù–∞–∑–≤–∞ –∞–≤—Ç–æ', vin)
        keyboard.append([InlineKeyboardButton(f"{model} ({vin[-6:]})", callback_data=f"view_my_deal_{vin}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_finance_menu")])
    await query.message.edit_text(f"–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏ ({len(my_deals)}):", reply_markup=InlineKeyboardMarkup(keyboard))
    return config.FINANCE_MY_DEALS_LIST

# --- –õ–æ–≥—ñ–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–µ–∫–µ—Ä–∞ ---
async def edit_deal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    deal_info = context.user_data['current_deal_info']
    vin = deal_info['record']['–í–Ü–ù-–∫–æ–¥']
    keyboard = [
        [InlineKeyboardButton("–ö–ª—ñ—î–Ω—Ç–∞", callback_data="edit_field_–ö–ª—ñ—î–Ω—Ç")],
        [InlineKeyboardButton("–ó–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å", callback_data="edit_field_–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å")],
        [InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="edit_field_–°—Ç–∞—Ç—É—Å")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_view_deal_{vin}")]
    ]
    await query.message.edit_text("–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=InlineKeyboardMarkup(keyboard))
    return config.FINANCE_EDIT_DEAL_MENU

async def edit_deal_ask_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    field_to_edit = query.data.split('_')[-1]
    context.user_data['field_to_edit'] = field_to_edit
    await query.message.edit_text(f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_to_edit}':")
    return config.FINANCE_EDIT_DEAL_GET_VALUE

async def edit_deal_save_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_value = update.message.text.strip()
    field = context.user_data['field_to_edit']
    deal_info = context.user_data['current_deal_info']
    deal_record = deal_info['record']
    user = update.effective_user

    old_value = deal_record.get(field, '–ù/–î')
    deal_record[field] = new_value

    if field == "–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å":
        try:
            total_price = float(new_value)
            total_paid = float(deal_record.get('–°–ø–ª–∞—á–µ–Ω–æ', 0))
            deal_record['–ó–∞–ª–∏—à–æ–∫'] = total_price - total_paid
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞! –í–∞—Ä—Ç—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            return config.FINANCE_EDIT_DEAL_GET_VALUE
    
    await update.message.reply_text("–û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
    
    new_msg_id = await send_or_edit_finance_notification(context, deal_record, user.full_name, f"–û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field}")
    if new_msg_id:
        deal_record["ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ"] = new_msg_id

    success = await gs_manager.update_row(config.SHEET_NAMES['payments'], deal_info['row_index'], deal_record, PAYMENT_SHEET_HEADERS)

    if success:
        await update.message.reply_text("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_employee_keyboard(user.id))
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=get_employee_keyboard(user.id))

    return ConversationHandler.END

async def add_tracker_ask_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    deal = context.user_data['existing_deal']['record']
    current_tracker = deal.get('–¢—Ä–µ–∫–µ—Ä') or "–Ω–µ –¥–æ–¥–∞–Ω–æ"
    msg = await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä: `{current_tracker}`\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–µ—Ä–∞:", parse_mode='Markdown')
    context.user_data['messages_to_delete'].append(msg.message_id)
    return config.FINANCE_ADD_TRACKER_GET_VALUE

async def add_tracker_save_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_tracker = update.message.text.strip()
    deal_info = context.user_data['existing_deal']
    deal_record = deal_info['record']
    user = update.effective_user

    context.user_data['messages_to_delete'].append(update.message.message_id)

    for msg_id in context.user_data.get('messages_to_delete', []):
        try:
            await context.bot.delete_message(chat_id=user.id, message_id=msg_id)
        except TelegramError as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {msg_id}: {e}")

    deal_record['–¢—Ä–µ–∫–µ—Ä'] = new_tracker
    
    new_msg_id = await send_or_edit_finance_notification(context, deal_record, user.full_name, "–û–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–µ–∫–µ—Ä")
    if new_msg_id:
        deal_record["ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª—ñ"] = new_msg_id

    success = await gs_manager.update_row(config.SHEET_NAMES['payments'], deal_info['row_index'], deal_record, PAYMENT_SHEET_HEADERS)

    if success:
        await context.bot.send_message(chat_id=user.id, text="‚úÖ –¢—Ä–µ–∫–µ—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_employee_keyboard(user.id))
    else:
        await context.bot.send_message(chat_id=user.id, text="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=get_employee_keyboard(user.id))
    
    return ConversationHandler.END


# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ ---
def get_finance_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(finance_menu, pattern="^cabinet_finance_menu$")],
        states={
            config.FINANCE_MENU: [
                CallbackQueryHandler(ask_for_vin, pattern="^finance_action_(new|add|view|tracker)$"),
                CallbackQueryHandler(show_my_deals, pattern="^finance_my_deals$"),
            ],
            config.FINANCE_GET_VIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vin_and_proceed)],
            config.FINANCE_NEW_DEAL_GET_MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_deal_get_model)],
            config.FINANCE_NEW_DEAL_SOURCE: [CallbackQueryHandler(new_deal_get_source, pattern="^source_")],
            config.FINANCE_NEW_DEAL_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_deal_get_price)],
            config.FINANCE_NEW_DEAL_CLIENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_deal_get_client)],
            config.FINANCE_NEW_DEAL_CONFIRM: [CallbackQueryHandler(new_deal_save, pattern="^confirm_new_deal$")],
            config.FINANCE_ADD_PAYMENT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_payment_get_amount)],
            config.FINANCE_ADD_PAYMENT_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_payment_save)],
            config.FINANCE_MY_DEALS_LIST: [
                CallbackQueryHandler(finance_menu, pattern="^back_to_finance_menu$"),
                CallbackQueryHandler(lambda u, c: view_deal_details(u, c, from_list=True), pattern="^view_my_deal_")
            ],
            config.FINANCE_VIEW_DEAL: [
                CallbackQueryHandler(edit_deal_menu, pattern="^finance_edit_deal$")
            ],
            config.FINANCE_EDIT_DEAL_MENU: [
                CallbackQueryHandler(lambda u, c: view_deal_details(u, c, from_list=True), pattern="^back_to_view_deal_"),
                CallbackQueryHandler(edit_deal_ask_value, pattern="^edit_field_")
            ],
            config.FINANCE_EDIT_DEAL_GET_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_deal_save_value)],
            config.FINANCE_ADD_TRACKER_GET_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_tracker_save_value)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
        map_to_parent={ConversationHandler.END: config.CABINET_MENU},
        allow_reentry=True
    )
