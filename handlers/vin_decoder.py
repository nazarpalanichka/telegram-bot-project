# -*- coding: utf-8 -*-
# handlers/vin_decoder.py

import logging
import requests
import html
from telegram import Update
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler
)

import config
from .start import cancel_command
from .keyboards import client_keyboard, get_employee_keyboard

logger = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
GET_VIN_FOR_DECODING = range(1)

# API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ NHTSA
NHTSA_DECODE_URL = "https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVinValues/{vin}?format=json"
NHTSA_RECALLS_URL_BY_MODEL = "https://api.nhtsa.gov/recalls/v2/byVehicle"


# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –∑ API
TRANSLATION_DICT = {
    # Fuel Types
    "Gasoline": "–ë–µ–Ω–∑–∏–Ω",
    "Diesel": "–î–∏–∑–µ–ª—å",
    "Flexible Fuel Vehicle (FFV)": "–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π (Flex-Fuel)",
    "Hybrid": "–ì—ñ–±—Ä–∏–¥",
    "Electric": "–ï–ª–µ–∫—Ç—Ä–æ",
    "Plug-in Hybrid": "–ü–ª–∞–≥—ñ–Ω-–≥—ñ–±—Ä–∏–¥",
    # Drive Types
    "FWD/Front-Wheel Drive": "–ü–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏–≤—ñ–¥ (FWD)",
    "RWD/Rear-Wheel Drive": "–ó–∞–¥–Ω—ñ–π –ø—Ä–∏–≤—ñ–¥ (RWD)",
    "AWD/All-Wheel Drive": "–ü–æ–≤–Ω–∏–π –ø—Ä–∏–≤—ñ–¥ (AWD)",
    "4WD/4-Wheel Drive/4x4": "–ü–æ–≤–Ω–∏–π –ø—Ä–∏–≤—ñ–¥ (4WD/4x4)",
    # Vehicle Types
    "PASSENGER CAR": "–õ–µ–≥–∫–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å",
    "MULTIPURPOSE PASSENGER VEHICLE (MPV)": "–ë–∞–≥–∞—Ç–æ—Ü—ñ–ª—å–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å (MPV/SUV)",
    "TRUCK": "–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞ / –ü—ñ–∫–∞–ø",
    # Transmission
    "Automatic": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞",
    "Manual": "–ú–µ—Ö–∞–Ω—ñ—á–Ω–∞",
    "Continuously Variable Transmission (CVT)": "–í–∞—Ä—ñ–∞—Ç–æ—Ä (CVT)",
    "Automated Manual Transmission (AMT)": "–†–æ–±–æ—Ç–∏–∑–æ–≤–∞–Ω–∞ (AMT)",
}

def translate_term(term: str) -> str:
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–µ—Ä–º—ñ–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ª–æ–≤–Ω–∏–∫, –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª."""
    return TRANSLATION_DICT.get(term, term)

async def start_vin_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î —Ä–æ–∑–º–æ–≤—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ VIN."""
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å 17-–∑–Ω–∞—á–Ω–∏–π VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ –°–®–ê:")
    return GET_VIN_FOR_DECODING

async def get_vin_and_decode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î VIN, —Ä–æ–±–∏—Ç—å –∑–∞–ø–∏—Ç –¥–æ API —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    vin = update.message.text.strip().upper()
    user_id = update.effective_user.id

    if len(vin) != 17 or not vin.isalnum():
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞. VIN-–∫–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 17 –ª—ñ—Ç–µ—Ä —Ç–∞ —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.")
        return GET_VIN_FOR_DECODING

    await update.message.reply_text("üîé –†–æ–±–ª—é –∑–∞–ø–∏—Ç–∏ –¥–æ –±–∞–∑–∏ NHTSA... –ó–∞—á–µ–∫–∞–π—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É.")

    try:
        # --- –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Ç: –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ ---
        response = requests.get(NHTSA_DECODE_URL.format(vin=vin))
        response.raise_for_status()
        data = response.json()

        if not data or not data.get('Results'):
            await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ —Ü—å–æ–º—É VIN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        car_info = data['Results'][0]
        
        if not car_info.get('Make') or car_info.get('ErrorCode') != '0':
            error_text = car_info.get('ErrorText', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
            await update.message.reply_text(
                f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ VIN.\n–ü—Ä–∏—á–∏–Ω–∞: {error_text}.\n\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ VIN-–∫–æ–¥ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ –Ω–∞–ª–µ–∂–∏—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—é –∑ —Ä–∏–Ω–∫—É –°–®–ê."
            )
            return ConversationHandler.END

        # --- –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º ---
        message_parts = [
            f"<b>‚öôÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ VIN:</b> <code>{html.escape(vin)}</code>\n",
            f"<b>- –†—ñ–∫:</b> {html.escape(car_info.get('ModelYear', '–ù/–î'))}",
            f"<b>- –ú–∞—Ä–∫–∞:</b> {html.escape(car_info.get('Make', '–ù/–î'))}",
            f"<b>- –ú–æ–¥–µ–ª—å:</b> {html.escape(car_info.get('Model', '–ù/–î'))}",
            f"<b>- –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è (Trim):</b> {html.escape(car_info.get('Trim', '–ù/–î'))}",
            f"<b>- –¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {html.escape(translate_term(car_info.get('VehicleType', '–ù/–î')))}",
            f"<b>- –î–≤–∏–≥—É–Ω (—Ü–∏–ª—ñ–Ω–¥—Ä–∏):</b> {html.escape(car_info.get('EngineCylinders', '–ù/–î'))}",
            f"<b>- –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ (–ª):</b> {html.escape(car_info.get('DisplacementL', '–ù/–î'))}",
            f"<b>- –¢–∏–ø –ø–∞–ª—å–Ω–æ–≥–æ:</b> {html.escape(translate_term(car_info.get('FuelTypePrimary', '–ù/–î')))}",
            f"<b>- –ü—Ä–∏–≤—ñ–¥:</b> {html.escape(translate_term(car_info.get('DriveType', '–ù/–î')))}",
            f"<b>- –¢—Ä–∞–Ω—Å–º—ñ—Å—ñ—è:</b> {html.escape(translate_term(car_info.get('TransmissionStyle', '–ù/–î')))}",
            f"<b>- –ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫:</b> {html.escape(car_info.get('PlantCountry', '–ù/–î'))}"
        ]
        
        # --- –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Ç: –í—ñ–¥–∫–ª–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó (Recalls) ---
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Ç—É –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            make = car_info.get('Make')
            model = car_info.get('Model')
            year = car_info.get('ModelYear')

            if make and model and year:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
                params = {
                    'make': make,
                    'model': model,
                    'modelYear': year
                }
                recall_response = requests.get(NHTSA_RECALLS_URL_BY_MODEL, params=params, headers=headers, timeout=10)
                
                # *** –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É 403, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ***
                if recall_response.status_code == 403:
                    logger.warning(f"–û—Ç—Ä–∏–º–∞–Ω–æ 403 Forbidden –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –≤—ñ–¥–∫–ª–∏—á–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è {make} {model} {year}.")
                    message_parts.append("\nüö® <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–∫–ª–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó:</b>")
                    message_parts.append("- ‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
                else:
                    recall_response.raise_for_status()
                    recall_data = recall_response.json()
                    recall_count = recall_data.get('Count', 0)

                    message_parts.append("\nüö® <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–∫–ª–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó:</b>")
                    if recall_count > 0:
                        message_parts.append(f"- –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–¥–∫–ª–∏—á–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ: <b>{recall_count}</b>")
                    else:
                        message_parts.append("- ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–¥–∫–ª–∏—á–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else:
                raise ValueError("Make, Model, or Year is missing for recall lookup.")

        except (requests.exceptions.RequestException, ValueError) as recall_e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–∫–ª–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó –¥–ª—è VIN {vin}: {recall_e}")
            message_parts.append("\nüö® <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥–∫–ª–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó:</b>\n- –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ.")

        message_parts.append("\n<i>–î–∞–Ω—ñ –Ω–∞–¥–∞–Ω–æ NHTSA (–°–®–ê)</i>")
        final_message = "\n".join(filter(None, message_parts))
        
        reply_markup = get_employee_keyboard(user_id) if user_id in config.ALLOWED_USER_IDS else client_keyboard
        
        await update.message.reply_html(final_message, reply_markup=reply_markup)

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ NHTSA API: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤—Ü—ñ VIN: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    return ConversationHandler.END


def get_vin_info_handler() -> ConversationHandler:
    """–°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–º–æ–≤–∏ –ø—Ä–æ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∫—É VIN."""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^VIN –Ü–Ω—Ñ–æ üá∫üá∏$"), start_vin_info)],
        states={
            GET_VIN_FOR_DECODING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vin_and_decode)]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
        allow_reentry=True
    )
