# -*- coding: utf-8 -*-
# handlers/catalog.py
# –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è, —Å—É–º—ñ—Å–Ω–∞ –∑ filter.py —Ç–∞ Google Sheets

import logging
from typing import Any, Dict, List
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import (
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest
import config
from .keyboards import client_keyboard
from .start import start_command

logger = logging.getLogger(__name__)
gs_manager = None

# --- –°–¢–ê–ù–ò –†–û–ó–ú–û–í–ò ---
CATALOG_BROWSE, CATALOG_DETAILS_VIEW = range(9100, 9102)

# --- –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ ---

def _col(rec: Dict[str, Any], key: str, default: str = "") -> str:
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º—É—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Å—É –∑–∞ –∫–ª—é—á–µ–º –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó."""
    mapping = config.POST_SHEET_COLS.get(key, key)
    val = rec.get(mapping, default)
    return str(val or default).strip()

def build_browse_caption(rec: Dict[str, Any]) -> str:
    """–ë—É–¥—É—î HTML-–ø—ñ–¥–ø–∏—Å –¥–ª—è –∫–∞—Ä—Ç–∫–∏ –∞–≤—Ç–æ –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É."""
    model = _col(rec, 'model', '–ú–æ–¥–µ–ª—å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
    price = _col(rec, 'price', '–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')
    year = _col(rec, 'year', '') # –†—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é –º–æ–¥–µ–ª—ñ
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —Ä—ñ–∫ –∑ –º–æ–¥–µ–ª—ñ, —è–∫—â–æ –≤—ñ–Ω —î
    if not year:
        parts = model.split()
        if len(parts) > 1 and parts[-1].isdigit() and len(parts[-1]) == 4:
            year = parts[-1]
            model = " ".join(parts[:-1])

    price_str = f"${int(float(price)):,}".replace(',', ' ') if price.replace('.', '', 1).isdigit() else price

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    details_parts = []
    if fuel := _col(rec, 'fuel_type'): details_parts.append(fuel)
    if mileage := _col(rec, 'mileage'):
        try:
            mileage_val = int(float(str(mileage).replace(' ', '')))
            details_parts.append(f"{mileage_val:,} –∫–º".replace(',', ' '))
        except (ValueError, TypeError):
             details_parts.append(mileage) # –Ø–∫—â–æ –ø—Ä–æ–±—ñ–≥ –Ω–µ—á–∏—Å–ª–æ–≤–∏–π
    if gearbox := _col(rec, 'gearbox'): details_parts.append(gearbox)
    if drivetrain := _col(rec, 'drivetrain'): details_parts.append(drivetrain)
    
    details_line = " | ".join(filter(None, details_parts))

    return (
        f"<b>{model} {year}</b>\n"
        f"<b>–¶—ñ–Ω–∞: {price_str}</b>\n\n"
        f"<i>{details_line}</i>"
    )

def build_details_caption(rec: Dict[str, Any]) -> str:
    """–ë—É–¥—É—î —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π HTML-–ø—ñ–¥–ø–∏—Å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ."""
    base_caption = build_browse_caption(rec)
    condition = _col(rec, 'condition')
    vin = _col(rec, 'vin')
    
    details = f"\n\n<b>VIN:</b> <code>{vin}</code>" if vin else ""
    if condition:
        details += f"\n<b>–û–ø–∏—Å:</b>\n{condition}"
    
    return base_caption + details

# --- –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---

async def display_browse_item(update: Update, context: ContextTypes.DEFAULT_TYPE, index: int | None = None) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∞–≤—Ç–æ.
    –û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, –ø—ñ–¥–ø–∏—Å–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    query = update.callback_query
    if query:
        await query.answer()

    browse_results = context.user_data.get('browse_results', [])
    if not browse_results:
        msg = "–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        if query:
            await query.edit_message_text(msg, reply_markup=None)
        else:
            await update.message.reply_text(msg)
        return

    current_index = index if index is not None else context.user_data.get('browse_index', 0)
    context.user_data['browse_index'] = current_index
    
    record = browse_results[current_index]
    caption = build_browse_caption(record)
    
    # --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ---
    total = len(browse_results)
    nav_row = []
    if current_index > 0:
        nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_prev_{current_index-1}"))
    nav_row.append(InlineKeyboardButton(f"{current_index + 1} / {total}", callback_data="cat_ignore"))
    if current_index < total - 1:
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"cat_next_{current_index+1}"))

    keyboard = InlineKeyboardMarkup([
        nav_row,
        [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"cat_details_{current_index}")],
        [InlineKeyboardButton("‚òéÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Nazar_Itrans")]
    ])

    # --- –§–æ—Ç–æ ---
    photo_ids = str(_col(record, 'photos', '')).split(',')
    photo_id = photo_ids[0] if photo_ids and photo_ids[0] else "https://placehold.co/1280x720/222/fff?text=iTrans+Motors"

    try:
        if query:
            # –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –º–µ–¥—ñ–∞. –Ø–∫—â–æ –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å - –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç.
            try:
                await query.edit_message_media(media=InputMediaPhoto(media=photo_id, caption=caption, parse_mode='HTML'), reply_markup=keyboard)
            except BadRequest as e:
                if "message is not modified" in str(e):
                    pass # –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
                else: # –Ø–∫—â–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ (–Ω–∞–ø—Ä. –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π photo_id), –æ–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(caption, parse_mode='HTML', reply_markup=keyboard)
        else:
            await update.message.reply_photo(photo_id, caption=caption, parse_mode='HTML', reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error displaying car item (photo_id: {photo_id}): {e}", exc_info=True)
        # –ê–≤–∞—Ä—ñ–π–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ–∑ —Ñ–æ—Ç–æ
        await update.effective_message.reply_html(caption, reply_markup=keyboard)


# --- Callback-–∏ ---

async def browse_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä–µ–¥' —Ç–∞ '–ù–∞–∑–∞–¥'."""
    query = update.callback_query
    try:
        _, direction, index_str = query.data.split('_')
        new_index = int(index_str)
        await display_browse_item(update, context, new_index)
    except (ValueError, IndexError) as e:
        logger.warning(f"Invalid browse callback data: {query.data}, error: {e}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.")
    
    return CATALOG_BROWSE

async def details_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ'."""
    query = update.callback_query
    try:
        _, _, index_str = query.data.split('_')
        index = int(index_str)
        record = context.user_data.get('browse_results', [])[index]
        caption = build_details_caption(record)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data=f"cat_back_{index}")],
            [InlineKeyboardButton("‚òéÔ∏è –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/Nazar_Itrans")]
        ])
        await query.edit_message_text(caption, parse_mode='HTML', reply_markup=keyboard)
        return CATALOG_DETAILS_VIEW
    except (ValueError, IndexError, TypeError) as e:
        logger.error(f"Error in details view for callback {query.data}: {e}")
        await query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ.")
        return CATALOG_BROWSE

async def back_to_browse_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–≥–ª—è–¥—É –∑ –¥–µ—Ç–∞–ª–µ–π."""
    query = update.callback_query
    try:
        _, _, index_str = query.data.split('_')
        index = int(index_str)
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ, –±–æ –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –º–µ–¥—ñ–∞
        await query.message.delete()
        await display_browse_item(update, context, index)

    except Exception as e:
        logger.error(f"Error returning to browse view: {e}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")

    return CATALOG_BROWSE

async def ignore_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—É—Å—Ç–∏–π callback –¥–ª—è –∫–Ω–æ–ø–æ–∫, —è–∫—ñ –Ω–µ –º–∞—é—Ç—å –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏ (–Ω–∞–ø—Ä. –ª—ñ—á–∏–ª—å–Ω–∏–∫)."""
    await update.callback_query.answer()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥ ---

async def catalog_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞—î –∫–∞—Ç–∞–ª–æ–≥, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—á–∏ –¥–∞–Ω—ñ –∑ Google Sheets."""
    await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–≤—Ç–æ, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...")
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ—Å—Ç–∏
        all_cars = await gs_manager.get_all_records(config.SHEET_NAMES['published_posts'])
        active_cars = [car for car in all_cars if _col(car, 'status') == 'active']
        
        if not active_cars:
            await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–≤—Ç–æ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.", reply_markup=client_keyboard)
            return ConversationHandler.END
            
        context.user_data['browse_results'] = active_cars
        context.user_data['browse_index'] = 0
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é..." —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–µ –∞–≤—Ç–æ
        await update.effective_message.delete()
        await display_browse_item(update, context, 0)
        
        return CATALOG_BROWSE

    except Exception as e:
        logger.error(f"Failed to start catalog: {e}", exc_info=True)
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=client_keyboard)
        return ConversationHandler.END


def get_catalog_handler() -> ConversationHandler:
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î ConversationHandler –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥—É."""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ$"), catalog_start)],
        states={
            CATALOG_BROWSE: [
                CallbackQueryHandler(browse_callback_handler, pattern=r"^cat_(next|prev)_"),
                CallbackQueryHandler(details_callback_handler, pattern=r"^cat_details_"),
                CallbackQueryHandler(ignore_callback, pattern=r"^cat_ignore$")
            ],
            CATALOG_DETAILS_VIEW: [
                 CallbackQueryHandler(back_to_browse_handler, pattern=r"^cat_back_")
            ]
        },
        fallbacks=[CommandHandler("start", start_command)],
        per_message=False
    )

