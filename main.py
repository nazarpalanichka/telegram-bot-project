# -*- coding: utf-8 -*-
# main.py

import logging
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import BotCommand
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CommandHandler
)

import config
from utils.g_sheets import GoogleSheetManager
from utils.sync import synchronize_working_sheets
from utils.g_sheets_extras import ensure_columns_exist
from handlers.channel_sold_patch import get_sold_patch_handler

# Handlers (–º–æ–¥—É–ª—ñ)
from handlers import (
    start,
    calculator,
    client,
    auctions,
    catalog,
    cabinet,
    channel,
    ria,
    finance,
    filter as car_filter,
    notes,
    vin_decoder,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    gs_manager = GoogleSheetManager(
        "credentials.json",
        "1RpWYzUuFzSabGBHegXhedk5FtxOMaABq-tca-c9LhWI"
    )
    if not await gs_manager.authorize():
        logger.critical("–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –≤ Google Sheets. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ credentials.json —Ç–∞ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    application = Application.builder().token(config.TOKEN).build()
    
    # –ü–µ—Ä–µ–¥–∞—î–º–æ gs_manager –≤ —É—Å—ñ –º–æ–¥—É–ª—ñ
    modules = [start, calculator, client, auctions, catalog, cabinet, channel, ria, finance, car_filter, notes, vin_decoder]
    for module in modules:
        module.gs_manager = gs_manager
    
    application.bot_data['gs_manager'] = gs_manager

    # --- –ü–ï–†–Ü–û–î–ò–ß–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø ---
    scheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    scheduler.add_job(synchronize_working_sheets, 'interval', minutes=30, args=[gs_manager], name="Sync working sheets")
    # –£–í–Ü–ú–ö–ù–ï–ù–û: –§—É–Ω–∫—Ü—ñ—ó —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø—Ä–∞—Ü—é—î
    scheduler.add_job(channel.check_reminders, 'interval', minutes=1, args=[application], name="Check reminders")
    scheduler.add_job(ria.check_autoria_postings, 'interval', hours=6, args=[application], name="Check AutoRIA")
    scheduler.start()
    logger.info("–í—Å—ñ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ.")

    # --- –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í ---
    
    # --- –ö–ª—ñ—î–Ω—Ç—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏ ---
    application.add_handler(CommandHandler("start", start.start_command))
    application.add_handler(MessageHandler(filters.Regex("^üöó –ö–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ$"), catalog.catalog_start))
    application.add_handler(MessageHandler(filters.Regex("^üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ —ñ–∑ –°–®–ê$"), calculator.calculator_start))
    application.add_handler(MessageHandler(filters.Regex("^üìù –ü—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ \\(–∑–∞—è–≤–∫–∞\\)$"), client.request_start))
    application.add_handler(MessageHandler(filters.Regex("^üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏$"), start.contact_us_command))
    application.add_handler(car_filter.get_filter_handler()) 
    application.add_handler(catalog.get_catalog_handler())

    # --- –ú–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏ ---
    application.add_handler(MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ / üì¢ –ü–æ—Å—Ç$"), channel.channel_menu))
    application.add_handler(MessageHandler(filters.Regex("^üìä –§—ñ–Ω–∞–Ω—Å–∏ / –£–≥–æ–¥–∏$"), finance.finance_menu))
    application.add_handler(MessageHandler(filters.Regex("^üöÄ Auto.RIA$"), ria.ria_menu))
    application.add_handler(MessageHandler(filters.Regex("^üìã –ú–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏$"), notes.notes_start))
    application.add_handler(MessageHandler(filters.Regex("^üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), cabinet.show_fleet_stats))
    application.add_handler(MessageHandler(filters.Regex("^üîç –ü–æ—à—É–∫ –ø–æ –±–∞–∑—ñ$"), cabinet.search_car_by_vin_start))

    # --- –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Ç–∞ ConversationHandlers ---
    application.add_handler(channel.get_add_or_publish_handler())
    application.add_handler(finance.get_finance_handler())
    application.add_handler(ria.get_ria_add_handler())
    application.add_handler(ria.get_ria_publish_draft_handler())
    application.add_handler(ria.get_ria_renew_handler())
    application.add_handler(ria.get_ria_sync_handler())
    application.add_handler(client.get_request_handler())
    application.add_handler(cabinet.get_owner_panel_handler())
    application.add_handler(cabinet.get_fix_fuel_handler())
    application.add_handler(ria.get_ria_link_handler())
    application.add_handler(vin_decoder.get_vin_info_handler())
    application.add_handler(notes.get_notes_handler())
    application.add_handler(get_sold_patch_handler())
    application.add_handler(cabinet.get_search_handler())

    # --- –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ callback-—ñ–≤ ---
    application.add_handler(CallbackQueryHandler(auctions.show_selected_auction_list, pattern=r"^show_auction_"))
    application.add_handler(CallbackQueryHandler(auctions.locations_page_callback, pattern=r"^locpage_"))
    application.add_handler(CallbackQueryHandler(channel.reminder_action_callback, pattern=r"^remind_"))
    application.add_handler(CallbackQueryHandler(ria.ria_renew_callback, pattern=r"^ria_renew_"))
    
    await application.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand("cancel", "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é")
    ])
    logger.info("–ö–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é –±–æ—Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}", exc_info=True)

