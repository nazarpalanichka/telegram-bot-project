# -*- coding: utf-8 -*-
# handlers/notes.py

import logging
import datetime
import math
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
)
from telegram.error import BadRequest

import config
from .start import cancel_command
from .keyboards import get_employee_keyboard

logger = logging.getLogger(__name__)
gs_manager = None

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—Ä–∫—É—à–∞ "–ù–æ—Ç–∞—Ç–∫–∏"
# –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —É –≤–∞—à–æ–º—É Google-–∞—Ä–∫—É—à—ñ "–ù–æ—Ç–∞—Ç–∫–∏"
# –º–∞—î —Ç–æ—á–Ω–æ —Ç–∞–∫—ñ –∂ –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫.
NOTES_HEADERS = ["ID –ù–æ—Ç–∞—Ç–∫–∏", "ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞", "–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏", "–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", "–°—Ç–∞—Ç—É—Å"]

def get_reminder_keyboard(note_id: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("1 –≥–æ–¥", callback_data=f"set_remind_{note_id}_1"),
            InlineKeyboardButton("2 –≥–æ–¥", callback_data=f"set_remind_{note_id}_2"),
            InlineKeyboardButton("4 –≥–æ–¥", callback_data=f"set_remind_{note_id}_4"),
        ],
        [
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞ –æ 10:00", callback_data=f"set_remind_{note_id}_tomorrow"),
            InlineKeyboardButton("–ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data=f"set_remind_{note_id}_none"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"select_note_{note_id}")]
    ])

async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü—ñ."""
    job = context.job
    chat_id = job.data['chat_id']
    note_text = job.data['text']
    note_id = job.data['note_id']
    
    reminder_message = f"üîî **–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø** üîî\n\n{note_text}"
    
    await context.bot.send_message(
        chat_id=chat_id, 
        text=reminder_message, 
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ", callback_data=f"manage_note_done_{note_id}")
        ]])
    )
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü—ñ, —â–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ
    if gs_manager:
        try:
            note_row = await gs_manager.get_row_by_id(config.SHEET_NAMES['notes'], note_id, id_column_name="ID –ù–æ—Ç–∞—Ç–∫–∏")
            if note_row:
                note_row['record']['–°—Ç–∞—Ç—É—Å'] = '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
                await gs_manager.update_row(config.SHEET_NAMES['notes'], note_row['row_index'], note_row['record'], NOTES_HEADERS)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–æ—Ç–∞—Ç–∫–∏ {note_id} –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

def remove_job_if_exists(note_id: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–í–∏–¥–∞–ª—è—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é."""
    current_jobs = context.job_queue.get_jobs_by_name(note_id)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –Ω–æ—Ç–∞—Ç–Ω–∏–∫–∞ ---

async def notes_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–æ—Ç–∞—Ç–Ω–∏–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É", callback_data="notes_create")],
        [InlineKeyboardButton("üìã –ú–æ—ó –∞–∫—Ç–∏–≤–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏", callback_data="notes_list_active_0")],
        [InlineKeyboardButton("‚úÖ –ê—Ä—Ö—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö", callback_data="notes_list_done_0")],
    ]
    
    message_text = "üìù *–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–¥–∞–Ω—å*\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    
    # FIX: Handle both message and callback_query updates
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif update.message:
        await update.message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    return config.NOTES_MENU

async def create_note_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏/–∑–∞–≤–¥–∞–Ω–Ω—è:")
    return config.NOTES_CREATE_GET_TEXT

async def get_note_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç —ñ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ, –ø—Ä–æ–ø–æ–Ω—É—é—á–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è."""
    user_id = update.effective_user.id
    note_text = update.message.text

    note_data = {
        "ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞": user_id,
        "–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏": note_text,
        "–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è": "–ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
        "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω–æ"
    }
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ—Ç–∞—Ç–∫—É –≤ —Ç–∞–±–ª–∏—Ü—é —ñ –æ—Ç—Ä–∏–º—É—î–º–æ —ó—ó ID (–Ω–æ–º–µ—Ä —Ä—è–¥–∫–∞)
    new_row_index = await gs_manager.add_row(config.SHEET_NAMES['notes'], note_data, NOTES_HEADERS, get_row_index=True)
    
    if not new_row_index:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    # –û–Ω–æ–≤–ª—é—î–º–æ ID –Ω–æ—Ç–∞—Ç–∫–∏ –≤ —Å–∞–º—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
    note_data["ID –ù–æ—Ç–∞—Ç–∫–∏"] = new_row_index
    await gs_manager.update_row(config.SHEET_NAMES['notes'], new_row_index, note_data, NOTES_HEADERS)

    context.user_data['current_note_id'] = new_row_index
    context.user_data['current_note_text'] = note_text

    await update.message.reply_text(
        "‚úÖ –ù–æ—Ç–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ö–æ–ª–∏ –≤–∞–º –Ω–∞–≥–∞–¥–∞—Ç–∏?",
        reply_markup=get_reminder_keyboard(str(new_row_index))
    )
    return config.NOTES_CREATE_GET_TIME

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –Ω–æ—Ç–∞—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        _, _, note_id_str, choice = query.data.split('_')
        note_id = int(note_id_str)
    except (ValueError, IndexError):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return ConversationHandler.END

    note_info = await gs_manager.get_row_by_id(config.SHEET_NAMES['notes'], note_id, id_column_name="ID –ù–æ—Ç–∞—Ç–∫–∏")
    if not note_info:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–æ—Ç–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    
    note_row = note_info['record']

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ
    remove_job_if_exists(str(note_id), context)

    delta = None
    reminder_time = None
    time_text = "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    if choice == '1': delta = datetime.timedelta(hours=1); time_text = "—á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É"
    elif choice == '2': delta = datetime.timedelta(hours=2); time_text = "—á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏"
    elif choice == '4': delta = datetime.timedelta(hours=4); time_text = "—á–µ—Ä–µ–∑ 4 –≥–æ–¥–∏–Ω–∏"
    elif choice == 'tomorrow':
        now = datetime.datetime.now()
        tomorrow_10_am = now.replace(hour=10, minute=0, second=0, microsecond=0) + datetime.timedelta(days=1)
        delta = tomorrow_10_am - now
        time_text = "–∑–∞–≤—Ç—Ä–∞ –æ 10:00"
    
    if delta:
        reminder_time = datetime.datetime.now() + delta
        context.job_queue.run_once(
            send_reminder,
            delta,
            data={'chat_id': query.from_user.id, 'text': note_row['–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏'], 'note_id': note_id},
            name=str(note_id)
        )
        note_row['–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'] = reminder_time.strftime("%Y-%m-%d %H:%M:%S")
        note_row['–°—Ç–∞—Ç—É—Å'] = '–ê–∫—Ç–∏–≤–Ω–æ (–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º)'
        await query.edit_message_text(f"‚úÖ –î–æ–±—Ä–µ, —è –Ω–∞–≥–∞–¥–∞—é –≤–∞–º {time_text}.")
    else: # 'none'
        note_row['–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'] = "–ë–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
        note_row['–°—Ç–∞—Ç—É—Å'] = '–ê–∫—Ç–∏–≤–Ω–æ'
        await query.edit_message_text("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    await gs_manager.update_row(config.SHEET_NAMES['notes'], note_info['row_index'], note_row, NOTES_HEADERS)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
        reply_markup=get_employee_keyboard(query.from_user.id)
    )
    return ConversationHandler.END

async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE, force_status: str = None, force_page: int = None) -> int:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–±–æ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫."""
    query = update.callback_query
    await query.answer()

    status = 'active'
    page = 0

    if force_status is not None and force_page is not None:
        status = force_status
        page = force_page
    else:
        try:
            _, _, status_from_data, page_str = query.data.split('_')
            status = status_from_data
            page = int(page_str)
        except (ValueError, IndexError):
            pass

    await query.message.edit_text("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–ø–∏—Å–æ–∫...")

    all_notes = await gs_manager.get_all_records(config.SHEET_NAMES['notes'], NOTES_HEADERS)
    if all_notes is None:
        await query.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
        return config.NOTES_MENU

    user_id = query.from_user.id
    
    if status == 'active':
        notes_to_show = [n for n in all_notes if str(n.get("ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞")) == str(user_id) and "–í–∏–∫–æ–Ω–∞–Ω–æ" not in n.get("–°—Ç–∞—Ç—É—Å", "")]
        title = "–ê–∫—Ç–∏–≤–Ω—ñ –Ω–æ—Ç–∞—Ç–∫–∏"
    else: # done
        notes_to_show = [n for n in all_notes if str(n.get("ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞")) == str(user_id) and "–í–∏–∫–æ–Ω–∞–Ω–æ" in n.get("–°—Ç–∞—Ç—É—Å", "")]
        title = "–ê—Ä—Ö—ñ–≤ –Ω–æ—Ç–∞—Ç–æ–∫"
        
    if not notes_to_show:
        await query.message.edit_text(f"–°–ø–∏—Å–æ–∫ '{title}' –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="notes_back_to_menu")]]))
        return config.NOTES_LIST

    # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
    notes_per_page = 5
    start_index = page * notes_per_page
    end_index = start_index + notes_per_page
    paginated_notes = notes_to_show[start_index:end_index]
    total_pages = math.ceil(len(notes_to_show) / notes_per_page)

    keyboard = []
    for note in paginated_notes:
        note_id = note.get("ID –ù–æ—Ç–∞—Ç–∫–∏")
        text = note.get("–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏", "–ë–µ–∑ —Ç–µ–∫—Å—Ç—É")
        keyboard.append([InlineKeyboardButton(text[:40], callback_data=f"select_note_{note_id}")])

    nav_row = []
    if page > 0: nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"notes_list_{status}_{page - 1}"))
    nav_row.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="noop"))
    if page < total_pages - 1: nav_row.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"notes_list_{status}_{page + 1}"))
    if nav_row: keyboard.append(nav_row)
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="notes_back_to_menu")])

    await query.message.edit_text(f"<b>{title}:</b>", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return config.NOTES_LIST

async def select_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –æ–ø—Ü—ñ—ó –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏."""
    query = update.callback_query
    await query.answer()
    note_id = int(query.data.split('_')[-1])

    note_info = await gs_manager.get_row_by_id(config.SHEET_NAMES['notes'], note_id, id_column_name="ID –ù–æ—Ç–∞—Ç–∫–∏")
    if not note_info:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–æ—Ç–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return config.NOTES_LIST
    
    note = note_info['record']
    context.user_data['current_note_id'] = note_id
    
    text = (f"üìù <b>–ù–æ—Ç–∞—Ç–∫–∞:</b>\n{note.get('–¢–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏', '')}\n\n"
            f"<b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {note.get('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', '–ù/–î')}\n"
            f"<b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</b> {note.get('–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', '–ù/–î')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {note.get('–°—Ç–∞—Ç—É—Å', '–ù/–î')}")
            
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"manage_note_done_{note_id}")],
        [InlineKeyboardButton("‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å", callback_data=f"manage_note_reschedule_{note_id}")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"manage_note_delete_{note_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="notes_list_active_0")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    return config.NOTES_MANAGE

async def manage_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –¥—ñ—ó –∑ –Ω–æ—Ç–∞—Ç–∫–æ—é: –≤–∏–∫–æ–Ω–∞—Ç–∏, –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å, –≤–∏–¥–∞–ª–∏—Ç–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        _, _, action, note_id_str = query.data.split('_')
        note_id = int(note_id_str)
    except (ValueError, IndexError):
        return config.NOTES_MANAGE

    note_info = await gs_manager.get_row_by_id(config.SHEET_NAMES['notes'], note_id, id_column_name="ID –ù–æ—Ç–∞—Ç–∫–∏")
    if not note_info:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–æ—Ç–∞—Ç–∫—É –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return await list_notes(update, context, force_status='active', force_page=0)
    
    note = note_info['record']

    if action == 'done':
        note['–°—Ç–∞—Ç—É—Å'] = '–í–∏–∫–æ–Ω–∞–Ω–æ'
        note['–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è'] = '–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ'
        await gs_manager.update_row(config.SHEET_NAMES['notes'], note_info['row_index'], note, NOTES_HEADERS)
        remove_job_if_exists(str(note_id), context)
        return await list_notes(update, context, force_status='active', force_page=0)

    elif action == 'delete':
        await gs_manager.delete_row(config.SHEET_NAMES['notes'], note_info['row_index'])
        remove_job_if_exists(str(note_id), context)
        return await list_notes(update, context, force_status='active', force_page=0)

    elif action == 'reschedule':
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:", reply_markup=get_reminder_keyboard(str(note_id)))
        return config.NOTES_RESCHEDULE

    return config.NOTES_MANAGE
    
async def notes_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –Ω–æ—Ç–∞—Ç–Ω–∏–∫–∞."""
    # FIX: Call notes_start directly with the update object
    return await notes_start(update, context)

def get_notes_handler() -> ConversationHandler:
    """–°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–º–æ–≤–∏ –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∞–º–∏."""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ù–æ—Ç–∞—Ç–∫–∏$"), notes_start)],
        states={
            config.NOTES_MENU: [
                CallbackQueryHandler(create_note_start, pattern="^notes_create$"),
                CallbackQueryHandler(list_notes, pattern="^notes_list_"),
            ],
            config.NOTES_CREATE_GET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_note_text)],
            config.NOTES_CREATE_GET_TIME: [CallbackQueryHandler(set_reminder, pattern="^set_remind_")],
            config.NOTES_LIST: [
                CallbackQueryHandler(list_notes, pattern="^notes_list_"),
                CallbackQueryHandler(select_note, pattern="^select_note_"),
                CallbackQueryHandler(notes_back_to_menu, pattern="^notes_back_to_menu$"),
            ],
            config.NOTES_MANAGE: [
                CallbackQueryHandler(manage_note, pattern="^manage_note_"),
                CallbackQueryHandler(list_notes, pattern="^notes_list_active_0$"),
            ],
            config.NOTES_RESCHEDULE: [
                CallbackQueryHandler(set_reminder, pattern="^set_remind_"),
                CallbackQueryHandler(select_note, pattern="^select_note_")
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
        allow_reentry=True
    )
