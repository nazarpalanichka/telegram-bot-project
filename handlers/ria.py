# -*- coding: utf-8 -*-
# handlers/ria.py

import logging
import datetime
import asyncio
import requests
import html
from functools import partial
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler, Application
)
from telegram.error import BadRequest, Forbidden

import config
from utils.helpers import escape_markdown_v2
from utils.sync import synchronize_working_sheets
from .start import cancel_command, start_command
from .keyboards import get_employee_keyboard
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ channel.py
from .channel import (
    add_or_publish_get_photos_handler, add_or_publish_done_media,
    add_or_publish_get_video_handler, add_or_publish_manual_model,
    add_or_publish_ask_condition, add_or_publish_publication_callback,
    add_or_publish_ask_location, get_location_keyboard, handle_completion_choice,
    ask_for_missing_field, get_missing_field_value, check_and_prompt_for_completeness,
    add_or_publish_confirm_and_publish_message, add_or_publish_media_type_callback
)

logger = logging.getLogger(__name__)
gs_manager = None

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API ---

async def make_ria_request(url: str, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–†–æ–±–∏—Ç—å –±–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ API Auto.RIA –∑ –æ–±—Ä–æ–±–∫–æ—é –ª—ñ–º—ñ—Ç—ñ–≤."""
    max_retries = 3
    base_wait_time = 60
    for i in range(max_retries):
        try:
            await asyncio.sleep(1.2)
            response = requests.get(url)
            if response.status_code == 429:
                wait_time = base_wait_time * (i + 1)
                logger.warning(f"RIA API rate limit hit. Retry {i+1}/{max_retries}. Waiting {wait_time}s.")
                if context and chat_id:
                    await context.bot.send_message(chat_id=chat_id, text=f"‚è≥ API Auto.RIA –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {wait_time // 60} —Ö–≤.")
                await asyncio.sleep(wait_time)
                continue
            if response.status_code == 404:
                logger.warning(f"–ó–∞–ø–∏—Ç –¥–æ {url} –ø–æ–≤–µ—Ä–Ω—É–≤ 404 Not Found.")
                return None
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ API {url}: {e}")
            return None
    logger.critical(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ {url} –ø—ñ—Å–ª—è {max_retries} —Å–ø—Ä–æ–±.")
    if context and chat_id:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Auto.RIA. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    return None

# --- –ù–æ–≤—ñ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —á–µ—Ä–Ω–µ—Ç–æ–∫ ---

async def ria_draft_skip_to_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –¥–æ —á–µ—Ä–Ω–µ—Ç–∫–∏ RIA —á–µ—Ä–µ–∑ /done.
    –ü—Ä–æ–ø—É—Å–∫–∞—î —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ –∑–∞–ø–∏—Ç—É—î —Å—Ç–∞–Ω –∞–≤—Ç–æ.
    """
    if not context.user_data.get('post_data', {}).get(config.POST_SHEET_COLS['photos']):
        await update.message.reply_text("–í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ, –∞–±–æ /cancel.")
        return config.ADD_OR_PUBLISH_GET_PHOTOS

    await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ. –¢–µ–ø–µ—Ä –æ–ø–∏—à—ñ—Ç—å —Å—Ç–∞–Ω –∞–≤—Ç–æ:")
    return config.RIA_DRAFT_ASK_CONDITION

async def ria_draft_get_video_and_ask_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –¥–æ —á–µ—Ä–Ω–µ—Ç–∫–∏ RIA.
    –ü—Ä–æ–ø—É—Å–∫–∞—î —Ä—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ –∑–∞–ø–∏—Ç—É—î —Å—Ç–∞–Ω –∞–≤—Ç–æ.
    """
    if update.message.video:
        context.user_data['post_data'][config.POST_SHEET_COLS['photos']] = update.message.video.file_id
        await update.message.reply_text("‚úÖ –í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ. –¢–µ–ø–µ—Ä –æ–ø–∏—à—ñ—Ç—å —Å—Ç–∞–Ω –∞–≤—Ç–æ:")
        return config.RIA_DRAFT_ASK_CONDITION
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ—Ñ–∞–π–ª.")
        return config.ADD_OR_PUBLISH_GET_VIDEO

async def ria_draft_get_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞–Ω –∞–≤—Ç–æ –¥–ª—è —á–µ—Ä–Ω–µ—Ç–∫–∏ —ñ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É."""
    new_condition = update.message.text.strip()
    context.user_data['post_data'][config.POST_SHEET_COLS['condition']] = new_condition
    await update.message.reply_text("‚úÖ –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ. –ì–æ—Ç—É—é –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥...")
    return await add_or_publish_confirm_and_publish_message(update, context)


# --- –ú–µ–Ω—é —Ç–∞ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ –∑ RIA ---

async def ria_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Auto.RIA."""
    from .cabinet import show_cabinet_menu
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ –∑–∞ ID –∑ RIA", callback_data="ria_add_by_id_start")],
        [InlineKeyboardButton("üìù –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –º–æ—ó —á–µ—Ä–Ω–µ—Ç–∫–∏", callback_data="ria_publish_my_draft_start")],
        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", callback_data="ria_renew_start")],
        [InlineKeyboardButton("üóÇÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="ria_check_full")],
        [InlineKeyboardButton("üîç –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ RIA", callback_data="ria_sync_start")]
    ]

    if user_id == config.OWNER_ID:
        keyboard.append([InlineKeyboardButton("üìã –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ —á–µ—Ä–Ω–µ—Ç–∫–∏ (–í–ª–∞—Å–Ω–∏–∫)", callback_data="ria_publish_draft_start")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞–±—ñ–Ω–µ—Ç", callback_data="back_to_main_cabinet")])

    if query.data == "back_to_main_cabinet":
        return await show_cabinet_menu(update, context)

    await query.message.edit_text("ü§ñ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Auto.ria:", reply_markup=InlineKeyboardMarkup(keyboard))
    return config.RIA_MENU_STATE

async def ria_add_by_id_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Ç—É—î ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ Auto.RIA:")
    return config.RIA_ADD_GET_ID

async def ria_add_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î ID, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏."""
    try:
        auto_id = int(update.message.text.strip())
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–æ–≤–∏–π ID.")
        return config.RIA_ADD_GET_ID

    await update.message.reply_text(f"üîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è ID: {auto_id}...")
    info_url = f"https://developers.ria.com/auto/info?api_key={config.AUTORIA_API_KEY}&auto_id={auto_id}"
    ad_info = await make_ria_request(info_url, context=context, chat_id=update.effective_chat.id)

    if not ad_info:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID.")
        return ConversationHandler.END

    vin_code = ad_info.get('VIN')
    if vin_code:
        await update.message.reply_text(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é VIN `{vin_code}` –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏...", parse_mode='Markdown')
        existing_car = await gs_manager.find_car_by_vin(vin_code, [config.SHEET_NAMES['published_posts']])
        if existing_car and existing_car['record'].get(config.POST_SHEET_COLS['status']) not in ['sold', 'archived']:
            record = existing_car['record']
            status = record.get(config.POST_SHEET_COLS['status'], '–Ω–µ–≤—ñ–¥–æ–º–æ')
            model = record.get(config.POST_SHEET_COLS['model'], '—Ü–µ –∞–≤—Ç–æ')

            message_text = (
                f"‚ùå *–ü–æ–º–∏–ª–∫–∞\\!* –ê–≤—Ç–æ –∑ —Ç–∞–∫–∏–º VIN –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ\\.\n\n"
                f"üöó *–ê–≤—Ç–æ:* {escape_markdown_v2(model)}\n"
                f"üö¶ *–°—Ç–∞—Ç—É—Å:* `{status}`\n\n"
                f"–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—É –∑ RIA —Å–∫–∞—Å–æ–≤–∞–Ω–æ\\. –í–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–º –∞–≤—Ç–æ —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –º–µ–Ω—é\\."
            )
            await update.message.reply_text(message_text, parse_mode='MarkdownV2')
            return ConversationHandler.END

    status_id = ad_info.get('stateData', {}).get('statusId', 0)
    is_active = (status_id == 1)

    if not is_active:
        logger.warning(f"RIA API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å ({status_id}) –¥–ª—è ID {auto_id}.")
        expire_date_str = ad_info.get('expireDate')
        if expire_date_str:
            try:
                expire_datetime = datetime.datetime.strptime(expire_date_str, '%Y-%m-%d %H:%M:%S')
                if expire_datetime > datetime.datetime.now():
                    logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {auto_id} –º–∞—î –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å, –∞–ª–µ –¥–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –í–≤–∞–∂–∞—î–º–æ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏–º.")
                    is_active = True
            except (ValueError, TypeError):
                 logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ expireDate –¥–ª—è {auto_id}, –∑–Ω–∞—á–µ–Ω–Ω—è: {expire_date_str}")

    if not is_active:
        status_name = ad_info.get('stateData', {}).get('status', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')
        await update.message.reply_text(f"‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ —î –∞–∫—Ç–∏–≤–Ω–∏–º (—Å—Ç–∞—Ç—É—Å: {status_name}). –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.")
        return ConversationHandler.END

    context.user_data['ad_info'] = ad_info
    auto_data = ad_info.get('autoData', {})

    mark_name = ad_info.get('markName', '')
    model_name = ad_info.get('modelName', '')
    year = auto_data.get('year')
    model = f"{mark_name} {model_name} {year}" if year else f"{mark_name} {model_name}"

    add_date_str = ad_info.get('addDate', '')
    expire_date_str = ad_info.get('expireDate', '')
    try:
        add_date_dt = datetime.datetime.strptime(add_date_str, '%Y-%m-%d %H:%M:%S')
        expire_date_dt = datetime.datetime.strptime(expire_date_str, '%Y-%m-%d %H:%M:%S')
        context.user_data['add_date_dt'] = add_date_dt
        context.user_data['expire_date_dt'] = expire_date_dt
        add_date_formatted = add_date_dt.strftime('%d.%m.%Y %H:%M')
        expire_date_formatted = expire_date_dt.strftime('%d.%m.%Y %H:%M')
    except (ValueError, TypeError):
        context.user_data['add_date_dt'] = None
        context.user_data['expire_date_dt'] = None
        add_date_formatted = "–ù–µ–≤—ñ–¥–æ–º–æ"
        expire_date_formatted = "–ù–µ–≤—ñ–¥–æ–º–æ"

    message_text = (f"<b>–ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–µ –∞–≤—Ç–æ:</b>\n\n"
                    f"<b>–ú–æ–¥–µ–ª—å:</b> {model}\n"
                    f"<b>–¶—ñ–Ω–∞:</b> {ad_info.get('USD', 'N/A')} USD\n"
                    f"<b>VIN:</b> <code>{ad_info.get('VIN', 'N/A')}</code>\n"
                    f"<b>–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ:</b> {add_date_formatted}\n"
                    f"<b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –¥–æ:</b> {expire_date_formatted}\n\n"
                    f"–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ —Ü–µ –∞–≤—Ç–æ –¥–æ –≤–∞—Å ({update.effective_user.full_name})?")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –ø—Ä–∏–≤'—è–∑–∞—Ç–∏", callback_data="assign_yes")],
        [InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–ª—å–Ω–∏–º", callback_data="assign_no")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_action")]
    ])

    await update.message.reply_text(message_text, parse_mode='HTML', reply_markup=keyboard)
    return config.RIA_ADD_CONFIRM_AND_ASSIGN

async def ria_add_save_drafts_and_ask_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–±–µ—Ä—ñ–≥–∞—î —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—è—Ö —ñ –ø–∏—Ç–∞—î, —á–∏ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç."""
    query = update.callback_query
    await query.answer()
    if query.data == "cancel_action":
        await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return ConversationHandler.END

    ad_info = context.user_data.get('ad_info')
    if not ad_info:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –≤—Ç—Ä–∞—á–µ–Ω–æ.")
        return ConversationHandler.END

    assign_to_user = query.data == 'assign_yes'
    employee_id = query.from_user.id if assign_to_user else ''

    await query.edit_message_text("üíæ –ó–±–µ—Ä—ñ–≥–∞—é —á–µ—Ä–Ω–µ—Ç–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö...")

    auto_data = ad_info.get('autoData', {})
    vin = ad_info.get('VIN')
    mark_name = ad_info.get('markName', '')
    model_name = ad_info.get('modelName', '')
    year = auto_data.get('year')
    model = f"{mark_name} {model_name} {year}" if year else f"{mark_name} {model_name}"
    modification = auto_data.get('fuelName', '')

    technical_condition_data = ad_info.get('technicalCondition') or {}
    condition_annotation = technical_condition_data.get('annotation', '–í–≤–µ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')

    post_draft_data = {
        config.POST_SHEET_COLS['vin']: vin,
        config.POST_SHEET_COLS['emp_id']: employee_id,
        config.POST_SHEET_COLS['status']: 'draft_ria',
        config.POST_SHEET_COLS['model']: model,
        config.POST_SHEET_COLS['price']: ad_info.get('USD', '0'),
        config.POST_SHEET_COLS['modification']: modification,
        config.POST_SHEET_COLS['mileage']: f"{auto_data.get('raceInt', 0) * 1000} –∫–º",
        config.POST_SHEET_COLS['drivetrain']: auto_data.get('driveName', ''),
        config.POST_SHEET_COLS['gearbox']: auto_data.get('gearboxName', ''),
        config.POST_SHEET_COLS['condition']: condition_annotation,
        config.POST_SHEET_COLS['status_prefix']: '‚úÖ –í –ù–ê–Ø–í–ù–û–°–¢–Ü',
        config.POST_SHEET_COLS['ria_auto_id']: ad_info.get('autoId', ''),
        config.POST_SHEET_COLS['ria_link']: ad_info.get('linkToView', ''),
        config.POST_SHEET_COLS['location']: ''
    }
    await gs_manager.add_row(config.SHEET_NAMES['published_posts'], post_draft_data, config.POST_SHEET_HEADER_ORDER)
    context.user_data['vin_of_new_draft'] = vin

    expire_datetime = context.user_data.get('expire_date_dt')
    autoria_ad_record = {**post_draft_data, **{
        config.POST_SHEET_COLS['date']: expire_datetime.isoformat() if expire_datetime else datetime.datetime.now().isoformat(),
        config.POST_SHEET_COLS['status']: 'active',
        config.POST_SHEET_COLS['notify_date']: 'none',
    }}
    await gs_manager.add_row(config.SHEET_NAMES['autoria_ads'], autoria_ad_record, config.POST_SHEET_HEADER_ORDER)
    logger.info(f"Added RIA ad {ad_info.get('autoId', 'N/A')} to tracking sheet.")
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="publish_now_yes")],
        [InlineKeyboardButton("‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏ —á–µ—Ä–Ω–µ—Ç–∫–æ—é", callback_data="publish_now_no")]
    ])
    await query.edit_message_text(
        "‚úÖ –ß–µ—Ä–Ω–µ—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ.\n\n"
        "–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –≤ –∫–∞–Ω–∞–ª—ñ –∑–∞—Ä–∞–∑?",
        reply_markup=keyboard
    )
    return config.RIA_ADD_ASK_PUBLISH

async def ria_add_handle_publish_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–¥–æ –Ω–µ–≥–∞–π–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."""
    query = update.callback_query
    await query.answer()
    
    vin_to_publish = context.user_data.get('vin_of_new_draft')
    if not vin_to_publish:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: VIN —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ.")
        return ConversationHandler.END

    post_info = await gs_manager.find_car_by_vin(vin_to_publish, [config.SHEET_NAMES['published_posts']])
    if not post_info:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—É —á–µ—Ä–Ω–µ—Ç–∫—É.")
        return ConversationHandler.END

    context.user_data['post_data'] = post_info['record']
    context.user_data['post_row_index'] = post_info['row_index']
    
    if query.data == "publish_now_yes":
        context.user_data['ria_prefilled'] = True
        await query.edit_message_text("–î–æ–±—Ä–µ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 10 —Ñ–æ—Ç–æ. –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /done.")
        return config.ADD_OR_PUBLISH_GET_PHOTOS
    else: # publish_now_no
        await query.edit_message_text("–ì–∞—Ä–∞–∑–¥, –∑–∞–ª–∏—à–∞—é —á–µ—Ä–Ω–µ—Ç–∫–æ—é.\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å, –¥–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∞–≤—Ç–æ:", reply_markup=get_location_keyboard())
        return config.RIA_ADD_GET_LOCATION

async def ria_add_set_location_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ª–æ–∫–∞—Ü—ñ—é –¥–ª—è —á–µ—Ä–Ω–µ—Ç–∫–∏ —ñ –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–∑–º–æ–≤—É."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_action":
        await query.edit_message_text("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó.")
        asyncio.create_task(synchronize_working_sheets(gs_manager))
        return ConversationHandler.END

    location = query.data.replace("set_location_", "")
    
    post_info_record = context.user_data.get('post_data')
    post_info_row_index = context.user_data.get('post_row_index')

    if not post_info_record or not post_info_row_index:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –ø—Ä–æ —á–µ—Ä–Ω–µ—Ç–∫—É –≤—Ç—Ä–∞—á–µ–Ω–æ.")
        return ConversationHandler.END

    await query.edit_message_text(f"–û–Ω–æ–≤–ª—é—é —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–∞ '{location}'...")
    
    post_info_record[config.POST_SHEET_COLS['location']] = location
    
    success = await gs_manager.update_row(
        config.SHEET_NAMES['published_posts'],
        post_info_row_index,
        post_info_record,
        config.POST_SHEET_HEADER_ORDER
    )

    if success:
        await query.edit_message_text(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ß–µ—Ä–Ω–µ—Ç–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤ '{location}'.")
        asyncio.create_task(synchronize_working_sheets(gs_manager))
    else:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
        
    return ConversationHandler.END

async def ria_publish_draft_start(update: Update, context: ContextTypes.DEFAULT_TYPE, my_drafts_only: bool = False) -> int:
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–µ—Ç–æ–∫ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    await query.edit_message_text("üîç –®—É–∫–∞—é —á–µ—Ä–Ω–µ—Ç–∫–∏ –∑ Auto.ria...")

    all_posts = await gs_manager.get_all_records(config.SHEET_NAMES['published_posts'], expected_headers=config.POST_SHEET_HEADER_ORDER)
    drafts = [p for p in all_posts if p.get(config.POST_SHEET_COLS['status']) == 'draft_ria']

    if my_drafts_only:
        drafts = [d for d in drafts if str(d.get(config.POST_SHEET_COLS['emp_id'])) == str(user_id)]

    if not drafts:
        message = "üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö –æ—Å–æ–±–∏—Å—Ç–∏—Ö —á–µ—Ä–Ω–µ—Ç–æ–∫." if my_drafts_only else "üòï –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —á–µ—Ä–Ω–µ—Ç–∫–∏."
        await query.edit_message_text(message)
        return ConversationHandler.END

    buttons = []
    for draft in drafts:
        model = draft.get(config.POST_SHEET_COLS['model'], '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        vin = draft.get(config.POST_SHEET_COLS['vin'], 'N/A')
        buttons.append([InlineKeyboardButton(f"{model} ({vin[-6:]})", callback_data=f"publish_ria_draft_{vin}")])

    buttons.append([InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_action")])
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:", reply_markup=InlineKeyboardMarkup(buttons))
    return config.RIA_PUBLISH_DRAFT_SELECT

async def ria_publish_draft_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–±—Ä–∞–Ω–æ—ó —á–µ—Ä–Ω–µ—Ç–∫–∏, –ø–∏—Ç–∞—é—á–∏ –ø—Ä–æ —Ç–∏–ø –º–µ–¥—ñ–∞."""
    query = update.callback_query
    await query.answer()
    if query.data == "cancel_action":
        await query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return ConversationHandler.END

    vin_to_publish = query.data.replace("publish_ria_draft_", "")
    post_info = await gs_manager.find_car_by_vin(vin_to_publish, [config.SHEET_NAMES['published_posts']])

    if not post_info or post_info['record'].get(config.POST_SHEET_COLS['status']) != 'draft_ria':
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —á–µ—Ä–Ω–µ—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_employee_keyboard(query.from_user.id))
        return ConversationHandler.END

    context.user_data['post_data'] = post_info['record']
    context.user_data['post_row_index'] = post_info['row_index']

    if not context.user_data['post_data'].get(config.POST_SHEET_COLS['emp_id']):
        context.user_data['post_data'][config.POST_SHEET_COLS['emp_id']] = query.from_user.id
        await query.message.reply_text(f"‚úÖ –ê–≤—Ç–æ '{post_info['record'].get(config.POST_SHEET_COLS['model'])}' —Ç–µ–ø–µ—Ä –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –≤–∞—Å.")
        await gs_manager.update_row(config.SHEET_NAMES['published_posts'], post_info['row_index'], context.user_data['post_data'], config.POST_SHEET_HEADER_ORDER)

    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ —Ç–∏–ø –º–µ–¥—ñ–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üñº –§–æ—Ç–æ (–¥–æ 10 —à—Ç.)", callback_data="media_type_photo")],
        [InlineKeyboardButton("üé¨ –í—ñ–¥–µ–æ (1 —à—Ç.)", callback_data="media_type_video")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_action")]
    ])
    await query.edit_message_text("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?", reply_markup=keyboard)
    return config.ADD_OR_PUBLISH_MEDIA_TYPE_CHOICE

# --- –©–æ–¥–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ---

async def _archive_expired_logic(application: Application) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω—å. –ü–æ–≤–µ—Ä—Ç–∞—î –∑–≤—ñ—Ç."""
    logger.info("Running archival check logic...")
    if not gs_manager:
        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∑–≤'—è–∑–∫—É –∑ Google Sheets."
    
    archived_count = 0
    try:
        all_tracked_ads = await gs_manager.get_all_records(config.SHEET_NAMES['autoria_ads'], expected_headers=config.POST_SHEET_HEADER_ORDER)
        now = datetime.datetime.now()
        
        if not all_tracked_ads:
            return "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            
        for i, ad in enumerate(list(all_tracked_ads)):
            row_index = i + 2
            if ad.get(config.POST_SHEET_COLS['status']) != 'active':
                continue
            
            expiry_date_str = ad.get(config.POST_SHEET_COLS['date'])
            if not expiry_date_str:
                continue

            try:
                expiry_datetime = datetime.datetime.fromisoformat(expiry_date_str)
                if expiry_datetime < now:
                    vin = ad.get(config.POST_SHEET_COLS['vin'], 'N/A')
                    model = ad.get(config.POST_SHEET_COLS['model'], '–ê–≤—Ç–æ')
                    link = ad.get(config.POST_SHEET_COLS['ria_link'], '')
                    if link and not link.startswith('http'):
                        link = f"https://auto.ria.com{link}"

                    safe_model = escape_markdown_v2(model)
                    safe_vin = escape_markdown_v2(vin)

                    message = (f"üóÇÔ∏è *–í –∞—Ä—Ö—ñ–≤—ñ*\n–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è *{safe_model}* \\(VIN: `{safe_vin}`\\) "
                               f"–ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤ \\(—Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –º–∏–Ω—É–≤\\)\\.")
                    if link:
                        message += f"\n[–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è]({link})"

                    await application.bot.send_message(chat_id=config.RIA_ARCHIVE_CHANNEL_ID, text=message, parse_mode='MarkdownV2')
                    
                    ad[config.POST_SHEET_COLS['status']] = 'archived'
                    await gs_manager.update_row(config.SHEET_NAMES['autoria_ads'], row_index, ad, config.POST_SHEET_HEADER_ORDER)
                    
                    logger.info(f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {ad.get(config.POST_SHEET_COLS['ria_auto_id'])} (VIN: {vin}) –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'archived'.")
                    archived_count += 1
            except (ValueError, TypeError, BadRequest, Forbidden) as e:
                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è {ad.get(config.POST_SHEET_COLS['ria_auto_id'])}: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ª–æ–≥—ñ–∫–∏ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó: {e}", exc_info=True)
        return "–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."

    if archived_count > 0:
        return f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ {archived_count} –æ–≥–æ–ª–æ—à–µ–Ω—å."
    else:
        return "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

async def archive_expired_ads_by_date(application: Application):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞—Ä—Ö—ñ–≤—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —è–∫–∏—Ö –º–∏–Ω—É–≤ (–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞)."""
    logger.info("–ó–∞–ø—É—Å–∫ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–∞ –¥–∞—Ç–æ—é...")
    await _archive_expired_logic(application)

async def _check_upcoming_expiry_logic(application: Application) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å, —â–æ —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è. –ü–æ–≤–µ—Ä—Ç–∞—î –∑–≤—ñ—Ç."""
    logger.info("Running upcoming expiry check logic...")
    if not gs_manager:
        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∑–≤'—è–∑–∫—É –∑ Google Sheets."
    
    sent_24h = 0
    sent_12h = 0
    try:
        all_tracked_ads = await gs_manager.get_all_records(config.SHEET_NAMES['autoria_ads'], expected_headers=config.POST_SHEET_HEADER_ORDER)
        now = datetime.datetime.now()
        
        if not all_tracked_ads:
            return "–°–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ–º–∞—î: –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            
        for i, ad in enumerate(all_tracked_ads):
            row_index = i + 2
            if ad.get(config.POST_SHEET_COLS['status']) != 'active': continue
            expiry_date_str = ad.get(config.POST_SHEET_COLS['date'])
            if not expiry_date_str: continue
            try:
                expiry_datetime = datetime.datetime.fromisoformat(expiry_date_str)
                time_left = expiry_datetime - now
                vin = ad.get(config.POST_SHEET_COLS['vin'], 'N/A')
                link = ad.get(config.POST_SHEET_COLS['ria_link'], '')
                if link and not link.startswith('http'):
                    link = f"https://auto.ria.com{link}"

                notification_status = ad.get(config.POST_SHEET_COLS['notify_date'], 'none')
                manager_id = ad.get(config.POST_SHEET_COLS['emp_id'])
                model = ad.get(config.POST_SHEET_COLS['model'], '–ê–≤—Ç–æ')
                auto_id = ad.get(config.POST_SHEET_COLS['ria_auto_id'])
                message, notification_level, keyboard = None, None, None

                safe_model = escape_markdown_v2(model)
                safe_vin = escape_markdown_v2(vin)

                if auto_id and link:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞ RIA —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", url=link)],
                        [InlineKeyboardButton("‚úÖ –Ø –≤–∂–µ –æ–Ω–æ–≤–∏–≤, –ø–µ—Ä–µ–≤—ñ—Ä –¥–∞—Ç—É", callback_data=f"ria_renew_{auto_id}")]
                    ])

                if 12 * 3600 < time_left.total_seconds() <= 24 * 3600 and notification_status not in ['sent_24h', 'sent_12h']:
                    message = (f"üîî *–£–≤–∞–≥–∞\\!* \\~24 –≥–æ–¥–∏–Ω–∏\n–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è *{safe_model}* \\(VIN: `{safe_vin}`\\) –±—É–¥–µ –≤ –∞—Ä—Ö—ñ–≤—ñ –∑–∞–≤—Ç—Ä–∞\\.\nüëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è]({link})")
                    notification_level = 'sent_24h'
                    sent_24h += 1
                elif 0 < time_left.total_seconds() <= 12 * 3600 and notification_status != 'sent_12h':
                    message = (f"‚è≥ *–£–≤–∞–≥–∞\\!* \\~12 –≥–æ–¥–∏–Ω\n–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è *{safe_model}* \\(VIN: `{safe_vin}`\\) –±—É–¥–µ –≤ –∞—Ä—Ö—ñ–≤—ñ —Å—å–æ–≥–æ–¥–Ω—ñ\\.\nüëâ [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è]({link})")
                    notification_level = 'sent_12h'
                    sent_12h += 1

                if message and notification_level:
                    await application.bot.send_message(chat_id=config.RIA_ARCHIVE_CHANNEL_ID, text=message, parse_mode='MarkdownV2', reply_markup=keyboard)
                    if manager_id:
                        try:
                            await application.bot.send_message(chat_id=int(manager_id), text=message, parse_mode='MarkdownV2', reply_markup=keyboard)
                        except (BadRequest, Forbidden) as e:
                            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

                    ad[config.POST_SHEET_COLS['notify_date']] = notification_level
                    await gs_manager.update_row(config.SHEET_NAMES['autoria_ads'], row_index, ad, config.POST_SHEET_HEADER_ORDER)
            except (ValueError, TypeError, BadRequest, Forbidden) as e:
                logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è {ad.get(config.POST_SHEET_COLS['ria_auto_id'], 'N/A')}: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω—å: {e}", exc_info=True)
        return "–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å."
    
    return f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω—å:\n ‚Ä¢ ~24 –≥–æ–¥–∏–Ω–∏: {sent_24h}\n ‚Ä¢ ~12 –≥–æ–¥–∏–Ω: {sent_12h}"


async def check_upcoming_expiry(application: Application):
    """–©–æ–¥–µ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å, —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —è–∫–∏—Ö —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞)."""
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å, —â–æ —Å–∫–æ—Ä–æ –ø–æ—Ç—Ä–∞–ø—è—Ç—å –≤ –∞—Ä—Ö—ñ–≤...")
    await _check_upcoming_expiry_logic(application)

async def ria_manual_full_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –ø–æ–≤–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–∞—Ä—Ö—ñ–≤ + —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)."""
    query = update.callback_query
    await query.answer()
    await query.message.edit_text("‚è≥ –†–æ–∑–ø–æ—á–∏–Ω–∞—é –ø–æ–≤–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É RIA...")
    
    archive_report = await _archive_expired_logic(context.application)
    expiry_report = await _check_upcoming_expiry_logic(context.application)
    
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ —á–∞—Å –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–≤—ñ—Ç—É —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ UX
    now_str = datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    full_report = (
        f"<b>–ó–≤—ñ—Ç —Å—Ç–∞–Ω–æ–º –Ω–∞ {now_str}</b>\n\n"
        f"{archive_report}\n\n"
        f"{expiry_report}"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é RIA", callback_data="back_to_ria_menu")]
    ])
    
    await query.message.edit_text(full_report, parse_mode='HTML', reply_markup=keyboard)

async def perform_ria_renewal(update: Update, context: ContextTypes.DEFAULT_TYPE, auto_id: int, ad_to_update: dict, row_index_to_update: int):
    """–í–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    target_message = update.callback_query.message if update.callback_query else update.message

    info_url = f"https://developers.ria.com/auto/info?api_key={config.AUTORIA_API_KEY}&auto_id={auto_id}"
    ad_info = await make_ria_request(info_url, context=context, chat_id=update.effective_chat.id)

    if not ad_info:
        await target_message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ Auto.RIA. –ú–æ–∂–ª–∏–≤–æ, –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    new_expire_date_str = ad_info.get('expireDate')
    if not new_expire_date_str:
        await target_message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: RIA API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–æ –Ω–æ–≤—É –¥–∞—Ç—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.")
        return

    try:
        new_expire_datetime = datetime.datetime.strptime(new_expire_date_str, '%Y-%m-%d %H:%M:%S')
        ad_to_update[config.POST_SHEET_COLS['date']] = new_expire_datetime.isoformat()
        ad_to_update[config.POST_SHEET_COLS['notify_date']] = 'renewed'
        ad_to_update[config.POST_SHEET_COLS['status']] = 'active'
        
        if not ad_to_update.get(config.POST_SHEET_COLS['ria_auto_id']):
             ad_to_update[config.POST_SHEET_COLS['ria_auto_id']] = ad_info.get('autoId', '')
             logger.info(f"Healed missing auto_id for VIN {ad_to_update.get(config.POST_SHEET_COLS['vin'])}")

        success = await gs_manager.update_row(
            config.SHEET_NAMES['autoria_ads'], row_index_to_update, ad_to_update, config.POST_SHEET_HEADER_ORDER
        )

        if success:
            new_date_formatted = new_expire_datetime.strftime('%d.%m.%Y %H:%M')
            success_text = f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!\n–ù–æ–≤–∞ –¥–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: *{new_date_formatted}*"
            if update.callback_query:
                await update.callback_query.edit_message_text(update.callback_query.message.text + f"\n\n*{success_text}*", parse_mode='Markdown')
            else:
                await target_message.reply_text(success_text, parse_mode='Markdown')
        else:
            await target_message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
    except (ValueError, TypeError):
        await target_message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ—ó –¥–∞—Ç–∏: `{new_expire_date_str}`.")

async def ria_renew_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–Ø –æ–Ω–æ–≤–∏–≤'."""
    query = update.callback_query
    await query.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é...")
    try:
        auto_id = int(query.data.split('_')[-1])
        
        all_ads = await gs_manager.get_all_records(config.SHEET_NAMES['autoria_ads'], expected_headers=config.POST_SHEET_HEADER_ORDER)
        ad_to_update, row_index_to_update = None, -1
        for i, ad in enumerate(all_ads):
            if str(ad.get(config.POST_SHEET_COLS['ria_auto_id'])) == str(auto_id):
                ad_to_update, row_index_to_update = ad, i + 2
                break
        
        if not ad_to_update:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
            return

        await perform_ria_renewal(update, context, auto_id, ad_to_update, row_index_to_update)

    except (ValueError, IndexError):
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∞–≤—Ç–æ.")

async def ria_renew_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, VIN-–∫–æ–¥ –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:")
    return config.RIA_RENEW_GET_ID

async def ria_renew_find_and_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç–æ–º —ñ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ."""
    query_text = update.message.text.strip()
    await update.message.reply_text(f"üîç –®—É–∫–∞—é –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç–æ–º `{query_text}`...", parse_mode='Markdown')

    ad_to_update, row_index_to_update = None, -1
    
    # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ —Ç—Ä–µ–∫–µ—Ä—ñ
    all_ads = await gs_manager.get_all_records(config.SHEET_NAMES['autoria_ads'], expected_headers=config.POST_SHEET_HEADER_ORDER)
    if all_ads:
        for i, ad in enumerate(all_ads):
            ria_auto_id = str(ad.get(config.POST_SHEET_COLS['ria_auto_id'], ''))
            vin_code = str(ad.get(config.POST_SHEET_COLS['vin'], '')).upper()
            ria_link = ad.get(config.POST_SHEET_COLS['ria_link'], '')

            if (ria_auto_id == query_text or
                vin_code == query_text.upper() or
                (f"_{query_text}.html" in ria_link and query_text.isdigit())):
                ad_to_update, row_index_to_update = ad, i + 2
                break
    
    if ad_to_update:
        auto_id_str = str(ad_to_update.get(config.POST_SHEET_COLS['ria_auto_id'], ''))
        
        if not auto_id_str or not auto_id_str.isdigit():
            context.user_data['ad_to_update_info'] = {'record': ad_to_update, 'row_index': row_index_to_update}
            await update.message.reply_text(
                "–ó–Ω–∞–π—à–æ–≤ —Ü–µ –∞–≤—Ç–æ —É –≤–∞—à–æ–º—É —Ç—Ä–µ–∫–µ—Ä—ñ, –∞–ª–µ ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.\n\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å **ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ Auto.RIA**, —â–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –π–æ–≥–æ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏."
            )
            return config.RIA_RENEW_GET_MISSING_ID
        
        auto_id = int(auto_id_str)
        await update.message.reply_text(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç—Ä–µ–∫–µ—Ä—ñ! –û–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ –¥–ª—è ID: {auto_id}...")
        await perform_ria_renewal(update, context, auto_id, ad_to_update, row_index_to_update)
        return ConversationHandler.END

    post_info = await gs_manager.find_car_by_vin(query_text, [config.SHEET_NAMES['published_posts']])
    if post_info:
        context.user_data['post_to_link'] = post_info
        await update.message.reply_text(
            "–ó–Ω–∞–π—à–æ–≤ —Ü–µ –∞–≤—Ç–æ —É –≤–∞—à—ñ–π –æ—Å–Ω–æ–≤–Ω—ñ–π –±–∞–∑—ñ, –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å **ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ Auto.RIA**, —â–æ–± –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –π–æ–≥–æ –¥–æ —Ü—å–æ–≥–æ –∞–≤—Ç–æ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏."
        )
        return config.RIA_LINK_GET_ID

    await update.message.reply_text("‚ùå –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID, VIN –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π –±–∞–∑—ñ.")
    return ConversationHandler.END

async def ria_renew_get_missing_id_and_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ID RIA –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ —Ç—Ä–µ–∫–µ—Ä—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—î –π–æ–≥–æ."""
    try:
        auto_id = int(update.message.text.strip())
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–æ–≤–∏–π ID.")
        return config.RIA_RENEW_GET_MISSING_ID

    update_info = context.user_data.get('ad_to_update_info')
    if not update_info:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ.")
        return ConversationHandler.END

    ad_to_update = update_info['record']
    row_index_to_update = update_info['row_index']
    
    ad_to_update[config.POST_SHEET_COLS['ria_auto_id']] = auto_id
    
    await update.message.reply_text(f"–ü—Ä–∏–≤'—è–∑—É—é ID {auto_id} —Ç–∞ –æ–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
    await perform_ria_renewal(update, context, auto_id, ad_to_update, row_index_to_update)

    context.user_data.clear()
    return ConversationHandler.END

async def ria_link_get_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç—Ä–∏–º—É—î ID –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏, —Å—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å –≤ —Ç—Ä–µ–∫–µ—Ä—ñ —Ç–∞ –æ–Ω–æ–≤–ª—é—î."""
    try:
        auto_id = int(update.message.text.strip())
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–æ–≤–∏–π ID.")
        return config.RIA_LINK_GET_ID
    
    post_info = context.user_data.get('post_to_link')
    if not post_info:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ.")
        return ConversationHandler.END

    await update.message.reply_text(f"–ü—Ä–∏–≤'—è–∑—É—é ID {auto_id} –¥–æ –∞–≤—Ç–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—é –¥–∞–Ω—ñ...")
    
    new_ad_record = post_info['record'].copy()
    new_ad_record[config.POST_SHEET_COLS['ria_auto_id']] = auto_id
    
    await gs_manager.add_row(config.SHEET_NAMES['autoria_ads'], new_ad_record, config.POST_SHEET_HEADER_ORDER)

    newly_added_ad_info = await gs_manager.find_car_by_vin(new_ad_record[config.POST_SHEET_COLS['vin']], [config.SHEET_NAMES['autoria_ads']])
    
    if newly_added_ad_info:
        await perform_ria_renewal(update, context, auto_id, newly_added_ad_info['record'], newly_added_ad_info['row_index'])
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    return ConversationHandler.END

async def ria_sync_with_posts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Compares 'Published Posts' with 'AutoRIA_Ads' and reports discrepancies.
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîÑ –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É...")

    if not gs_manager:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –∑–≤'—è–∑–∫—É –∑ Google Sheets.")
        return

    try:
        posts_records = await gs_manager.get_all_records(config.SHEET_NAMES['published_posts']) or []
        ria_ads_records = await gs_manager.get_all_records(config.SHEET_NAMES['autoria_ads']) or []

        posts_vins = {
            p.get(config.POST_SHEET_COLS['vin']).strip().upper()
            for p in posts_records
            if p.get(config.POST_SHEET_COLS['vin']) and p.get(config.POST_SHEET_COLS['status']) in ('active', 'draft_ria')
        }

        ria_vins = {
            ad.get(config.POST_SHEET_COLS['vin']).strip().upper()
            for ad in ria_ads_records
            if ad.get(config.POST_SHEET_COLS['vin']) and ad.get(config.POST_SHEET_COLS['status']) == 'active'
        }

        missing_in_ria_vins = posts_vins - ria_vins

        report_lines = []
        keyboard = None
        if not missing_in_ria_vins:
            report_lines.append("‚úÖ <b>–í—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!</b>\n\n–í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ—Å—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å—Å—è –≤ –∞—Ä–∫—É—à—ñ 'AutoRIA_Ads'.")
        else:
            report_lines.append(f"‚ö†Ô∏è <b>–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ ({len(missing_in_ria_vins)} –∞–≤—Ç–æ):</b>\n\n"
                                "–¶—ñ –∞–≤—Ç–æ —î –≤ '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –ü–æ—Å—Ç–∏', –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ 'AutoRIA_Ads'. "
                                "–ú–æ–∂–ª–∏–≤–æ, —ó—Ö –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ RIA.\n")

            vin_to_model_map = {
                p.get(config.POST_SHEET_COLS['vin']).strip().upper(): p.get(config.POST_SHEET_COLS['model'], '–ë–µ–∑ –Ω–∞–∑–≤–∏')
                for p in posts_records if p.get(config.POST_SHEET_COLS['vin'])
            }
            context.user_data['missing_ria_vins'] = list(missing_in_ria_vins)
            context.user_data['vin_to_model_map'] = vin_to_model_map


            for vin in sorted(list(missing_in_ria_vins)):
                model = vin_to_model_map.get(vin, '–ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–¥–µ–ª—å')
                safe_model = html.escape(model)
                safe_vin = html.escape(vin)
                report_lines.append(f"‚Ä¢ {safe_model} (<code>{safe_vin}</code>)")
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîó –ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∞–≤—Ç–æ –¥–æ RIA", callback_data="ria_link_start")
            ]])

        final_report = "\n".join(report_lines)
        
        if len(final_report) > 4096:
            await query.edit_message_text(report_lines[0])
            chunk = ""
            for line in report_lines[1:]:
                if len(chunk) + len(line) > 4000:
                    await context.bot.send_message(chat_id=query.from_user.id, text=chunk, parse_mode='HTML')
                    chunk = line
                else:
                    chunk += f"\n{line}"
            if chunk:
                await context.bot.send_message(chat_id=query.from_user.id, text=chunk, parse_mode='HTML', reply_markup=keyboard)

        else:
             await query.edit_message_text(final_report, parse_mode='HTML', reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error during RIA sync with posts: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---

def get_ria_add_handler():
    """–°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ –∑ RIA."""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(ria_add_by_id_start, pattern="^ria_add_by_id_start$")],
        states={
            config.RIA_ADD_GET_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_add_get_id)],
            config.RIA_ADD_CONFIRM_AND_ASSIGN: [CallbackQueryHandler(ria_add_save_drafts_and_ask_publish, pattern=r"^(assign_yes|assign_no|cancel_action)$")],
            config.RIA_ADD_ASK_PUBLISH: [CallbackQueryHandler(ria_add_handle_publish_choice, pattern=r"^(publish_now_yes|publish_now_no)$")],
            config.RIA_ADD_GET_LOCATION: [CallbackQueryHandler(ria_add_set_location_and_finish, pattern=r"^set_location_|^cancel_action$")],
            config.ADD_OR_PUBLISH_GET_PHOTOS: [MessageHandler(filters.PHOTO, add_or_publish_get_photos_handler), CommandHandler("done", ria_draft_skip_to_condition)],
            config.ADD_OR_PUBLISH_GET_VIDEO: [MessageHandler(filters.VIDEO, ria_draft_get_video_and_ask_condition)],
            config.RIA_DRAFT_ASK_CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_draft_get_condition)],
            config.ADD_OR_PUBLISH_CONFIRM_AND_PUBLISH: [CallbackQueryHandler(add_or_publish_publication_callback, pattern="^publish_final$|^cancel_action$")]
        },
        fallbacks=[CommandHandler("start", start_command), CommandHandler("cancel", cancel_command)],
        per_message=False,
        allow_reentry=True
    )

def get_ria_publish_draft_handler():
    """–°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–∏—Ö —á–µ—Ä–Ω–µ—Ç–æ–∫."""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(partial(ria_publish_draft_start, my_drafts_only=False), pattern="^ria_publish_draft_start$"),
            CallbackQueryHandler(partial(ria_publish_draft_start, my_drafts_only=True), pattern="^ria_publish_my_draft_start$")
        ],
        states={
            config.RIA_PUBLISH_DRAFT_SELECT: [CallbackQueryHandler(ria_publish_draft_select, pattern=r"^publish_ria_draft_|^cancel_action$")],
            config.ADD_OR_PUBLISH_MEDIA_TYPE_CHOICE: [CallbackQueryHandler(add_or_publish_media_type_callback, pattern=r"^media_type_")],
            config.ADD_OR_PUBLISH_GET_PHOTOS: [MessageHandler(filters.PHOTO, add_or_publish_get_photos_handler), CommandHandler("done", ria_draft_skip_to_condition)],
            config.ADD_OR_PUBLISH_GET_VIDEO: [MessageHandler(filters.VIDEO, ria_draft_get_video_and_ask_condition)],
            config.RIA_DRAFT_ASK_CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_draft_get_condition)],
            config.ADD_OR_PUBLISH_CONFIRM_AND_PUBLISH: [CallbackQueryHandler(add_or_publish_publication_callback, pattern="^publish_final$|^cancel_action$")]
        },
        fallbacks=[CommandHandler("start", start_command), CommandHandler("cancel", cancel_command)],
        per_message=False,
        allow_reentry=True
    )

def get_ria_renew_handler():
    """–°—Ç–≤–æ—Ä—é—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –º–µ–Ω—é."""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(ria_renew_start, pattern="^ria_renew_start$")],
        states={
            config.RIA_RENEW_GET_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_renew_find_and_update)],
            config.RIA_LINK_GET_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_link_get_id)],
            config.RIA_RENEW_GET_MISSING_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_renew_get_missing_id_and_update)],
        },
        fallbacks=[CommandHandler("start", start_command), CommandHandler("cancel", cancel_command)],
        per_message=False,
        allow_reentry=True
    )

async def ria_link_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Entry point for the RIA linking conversation."""
    query = update.callback_query
    await query.answer()

    missing_vins = context.user_data.get('missing_ria_vins')
    if not missing_vins:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    await query.edit_message_text("–î–æ–±—Ä–µ. –í–≤–µ–¥—ñ—Ç—å VIN-–∫–æ–¥ –∞–≤—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É –≤–∏—â–µ, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ RIA:")
    return config.RIA_LINK_GET_VIN

async def ria_link_get_vin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles the VIN input from the user."""
    vin_input = update.message.text.strip().upper()
    missing_vins = context.user_data.get('missing_ria_vins')

    if vin_input not in missing_vins:
        await update.message.reply_text("‚ùå –¶–µ–π VIN-–∫–æ–¥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Å–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ–ø—ñ—é–π—Ç–µ VIN –∑—ñ –∑–≤—ñ—Ç—É –≤–∏—â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel.")
        return config.RIA_LINK_GET_VIN

    context.user_data['vin_to_link'] = vin_input
    model_name = context.user_data.get('vin_to_model_map', {}).get(vin_input, '—Ü–µ –∞–≤—Ç–æ')
    await update.message.reply_text(f"‚úÖ –î–æ–±—Ä–µ, –ø—Ä–∏–≤'—è–∑—É—î–º–æ {model_name}.\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ Auto.RIA:")
    return config.RIA_LINK_GET_RIA_ID

async def ria_link_get_ria_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles the RIA ID input, creates the record, and finishes."""
    try:
        auto_id = int(update.message.text.strip())
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–æ–≤–∏–π ID.")
        return config.RIA_LINK_GET_RIA_ID

    vin_to_link = context.user_data.get('vin_to_link')
    if not vin_to_link:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: VIN –∞–≤—Ç–æ –≤—Ç—Ä–∞—á–µ–Ω–æ. /cancel")
        return ConversationHandler.END

    await update.message.reply_text(f"‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é ID {auto_id} –Ω–∞ RIA —Ç–∞ –≥–æ—Ç—É—é –¥–∞–Ω—ñ...")

    # 1. Fetch RIA ad info to get expireDate and link
    info_url = f"https://developers.ria.com/auto/info?api_key={config.AUTORIA_API_KEY}&auto_id={auto_id}"
    ad_info = await make_ria_request(info_url, context=context, chat_id=update.effective_chat.id)

    if not ad_info:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID –Ω–∞ RIA. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return config.RIA_LINK_GET_RIA_ID
    
    # 2. Fetch the original post data from "Published Posts"
    post_info = await gs_manager.find_car_by_vin(vin_to_link, [config.SHEET_NAMES['published_posts']])
    if not post_info:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è VIN {vin_to_link} –≤ —Ç–∞–±–ª–∏—Ü—ñ.")
        return ConversationHandler.END

    # 3. Create the new record for "AutoRIA_Ads"
    new_ad_record = post_info['record'].copy()
    
    # Update with RIA data
    new_ad_record[config.POST_SHEET_COLS['ria_auto_id']] = ad_info.get('autoId', '')
    new_ad_record[config.POST_SHEET_COLS['ria_link']] = ad_info.get('linkToView', '')
    
    try:
        expire_date_str = ad_info.get('expireDate')
        expire_datetime = datetime.datetime.strptime(expire_date_str, '%Y-%m-%d %H:%M:%S')
        new_ad_record[config.POST_SHEET_COLS['date']] = expire_datetime.isoformat()
    except (ValueError, TypeError, KeyError):
        logger.warning(f"Could not parse expireDate from RIA for {auto_id}. Using current time.")
        new_ad_record[config.POST_SHEET_COLS['date']] = datetime.datetime.now().isoformat()

    new_ad_record[config.POST_SHEET_COLS['status']] = 'active'
    new_ad_record[config.POST_SHEET_COLS['notify_date']] = 'linked' 

    # 4. Save to sheet
    success = await gs_manager.add_row(config.SHEET_NAMES['autoria_ads'], new_ad_record, config.POST_SHEET_HEADER_ORDER)

    if success:
        await update.message.reply_text(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ! –ê–≤—Ç–æ {new_ad_record.get('model')} –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è RIA —ñ –¥–æ–¥–∞–Ω–æ –¥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—é 'AutoRIA_Ads'.")

    context.user_data.clear()
    return ConversationHandler.END

def get_ria_link_handler() -> ConversationHandler:
    """Creates a handler for the RIA linking conversation."""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(ria_link_start, pattern="^ria_link_start$")],
        states={
            config.RIA_LINK_GET_VIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_link_get_vin)],
            config.RIA_LINK_GET_RIA_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, ria_link_get_ria_id)],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
        allow_reentry=True
    )
